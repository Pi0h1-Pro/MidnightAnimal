<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise general variables.

// Set offset.
offset = 0

// Maximum number of messages displayed at once.
length = 3

// Initialise list to store text.
list = ds_list_create()

// Initialise list to store icon.
icons = ds_list_create()

// Placeholder message text.
text_id[0] = "" 

// Placeholder icon.
icon_id[0] = "" 

// Current character.
char = 0 

// Current message. 
state = 0 

// Finish one sentence and move to the next.
phase = 0 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise custom properties.

padding = 4             // char padding.
max_width = 640         // Maximum width of char box.
c_interior = c_black    // Interior colour of char box.
text_col = c_white      // char colour.
key = mb_left           // Interaction key.
text_speed = 1          // Characters draw per step.

width_shift = 0         // Smooth text box size for horizontal increase/decrease.
height_shift = 0        // Smooth text box size for vertical increase/decrease.

fade = 0                // Controls text box fade.
alpha = 0               // Controls transparency, which is altered with 'phase'.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy data structures.
ds_list_destroy(list)
ds_list_destroy(icons)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Populate the list, and scroll through it.

// Create new entry in the list.
if mouse_check_button_pressed(mb_left) {
    ds_list_add(list, text_id[ds_list_size(list)]) // Add text.
    ds_list_add(icons, icon_id[ds_list_size(icons)]) // Add icons.
}

// Scroll through the list.
if mouse_wheel_up() offset = min(offset + 1, (ds_list_size(list) - min(ds_list_size(list), length)))
if mouse_wheel_down() offset = max(offset - 1, 0)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw icons, text boxes and text.

// Start looping through the list.
for (i = 0; i &lt; min(ds_list_size(list), length); i++) {

    // Define what the text will be.
    var line = string(ds_list_find_value(list, i + max(ds_list_size(list) - length, 0) - offset))
    
    // Check whether the box is close to its destination, with a leeway of 4 pixels both horizontally and vertically.
    positioned = x &gt; (view_wview[0] / 2  + 72 - 2) and x &lt; (view_wview[0] / 2  + 72 + 2) and y &gt; ((view_hview[0] / 2 - 76 - padding * 2) - 2) and y &lt; ((view_hview[0] / 2 - 76 - padding * 2) + 2)
    
    draw_set_halign(fa_left)
    draw_set_valign(fa_center)
    draw_set_font(fntPauseMenu)
    draw_set_alpha(alpha)
    
    // Width of message, capped at max_width.
    width = min(max_width, string_width_ext(line, -1, max_width) + padding * 2)
    
    // Height of message box (varies based on message length).
    height = (string_height_ext(line, -1, width) + padding * 2) / 5
    
    // Gradual width and height shifting of box.
    if height_shift &lt; height height_shift += (height - height_shift) / 5
    if height_shift &gt; height height_shift -= (height_shift - height) / 5
    
    if width_shift &lt; width width_shift += (width - width_shift) / 5
    if width_shift &gt; width width_shift -= (width_shift - width) / 5
    
    // Draw text box.
    draw_set_color(c_interior)
    //draw_rectangle(x - padding * 2, y - height_shift / 2  + i * 80, x + 80 + padding * 2, y + height_shift / 2  + i * 80, false)
    draw_rectangle(x - 50 - padding * 2, y - height_shift / 2  + i * 80, x + 80 + padding * 2, y + height_shift / 2  + i * 80, false)
    
    // Draw text.
    draw_set_color(text_col)
    //draw_text_ext_transformed(x, y + i * 80, string_copy(line, 1, char), -1, width - padding * 2, 0.125, 0.125, 0)
    draw_text_ext_transformed(x - 12, y  + i * 80, line, -1, width, 0.125, 0.125, 0)
    
    // Check whether key is held.
    hold = mouse_check_button(key) 
    
    // If the text is currently in the proper position, increase speed.
    if char &lt; string_length(line) {   
        if positioned char += text_speed * (1 + hold)
    }
    
    // Jump to the end of the sentence if it hasn't been completed.
    if mouse_check_button_pressed(key) {
        if char != string_length(line) char = string_length(line) else phase = 1
    }
    
    // Move one to the next available message if it exists; otherwise, destroy the dialogue prompt.
    if char = string_length(line) and mouse_check_button_pressed(key) and phase = 1 {
    
        // If the message state is less than the [array_length] - 1...        
        if state &lt; (array_length_1d(text_id) - 1)  {
            state += 1
            char = 0
            phase = 0
        } 
        
        // ...otherwise, fade out the textbox.
        else fade = 1
        
    }
    
    // Gradually shift the coordinates of the box (below the pointer, as per '-padding * 2' for y).
    if x &lt; view_wview[0] / 2  + 72 x += ((view_wview[0] / 2  + 72) - x) / 2
    if x &gt; view_wview[0] / 2  + 72 x -= (x - (view_wview[0] / 2  + 72)) / 2
    
    if y &lt; (view_hview[0] / 2 - 76 - padding * 2) y += ((view_hview[0] / 2 - 76 - padding * 2) - y) / 2
    if y &gt; (view_hview[0] / 2 - 76 - padding * 2) y -= (y - (view_hview[0] / 2 - 76 - padding * 2)) / 2
    
    // Draw icons.
    draw_sprite_ext(sprMessengerIcons, icon_id[ds_list_find_value(icons, i + max(ds_list_size(icons) - length, 0) - offset)], view_wview[0] / 2 + 20, view_hview[0] / 2 - 84 + i * 80, 0.3, 0.3, 0, c_white, image_alpha)
    
    draw_set_alpha(1)
    
    // Fading behaviour for text box; destroy it if the image's alpha drops too low.
    if fade = 0 {
        if positioned {
            if alpha &lt; 1 alpha += (1 - alpha) / 5
        }
    } else {
        if alpha &gt; 0 alpha -= alpha / 5
        if alpha &lt; 0.05 instance_destroy()    
    } 
}
  

    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
