<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise settings.

// Set texture and colour.
tex = sprite_get_texture(sprTextureRain, choose(0, 1))
water_col = make_color_hsv(130,90,160)

// Horizontal range.
rain_range = room_width

// Rain drop count (changed with scrRainSetDropCount).
rain_drops = 32

// Direction, speed and volume.
rain_direction = 315
rain_speed = 30
rain_sound_volume = 1

// Size of a single rain drop.
rain_size = 1

// Length of a single rain drop.
rain_length = 3

// Start the rain immediately.
alarm[0] = 1

// Spawn rain drops.
rain[rain_drops*2] = 0
for(var i = 0; i &lt; rain_drops * 2; i+=2) { 
    rain[i] = random_range(x - rain_range, x + rain_range)
    rain[i+1] = 0
}

// Check to see if the rain has started. 
rain_started = false 


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision detection.

// Enable / disable pixel-perfect collision detection.
rain_collision_precise = false

// Use accurate collision detection (slower).
rain_collision_accurate = false

// Number of pixels to skip in detection (0 is the most accurate, but the slowest).
rain_collision_accurate_skip = 8

// Collision particles.
/*system = part_system_create()
p1 = part_type_create()
part_type_speed(p1,4,12,0,0)
part_type_alpha2(p1,1,0)
part_type_direction(p1,20,160,0,0)
part_type_shape(p1,pt_shape_disk)
part_type_color2(p1,water_col, c_white)
part_type_life(p1,2,6)
part_type_size(p1,0.02,0.06,0,0)
part_type_gravity(p1,0.2,270)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop the rain sound.
audio_stop_sound(sndRain)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start rain after thunder sound plays.
if !audio_is_playing(sndRain) {
    audio_play_sound(sndRain,10,1)
    audio_sound_gain(sndRain, 0, 0)
    audio_sound_gain(sndRain, rain_sound_volume, 300)
}
    
rain_started = true

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop the rain sound.
audio_stop_sound(sndRain)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set draw properties.

x = 0//room_width / 2
y = 0//room_height / 2

if irandom(900) = 5{
    if !audio_is_playing(sndThunder) audio_play_sound(sndThunder,5,0)
}
  
if rain_started {
    var rain_hs = lengthdir_x(rain_speed, rain_direction);
    var rain_vs = lengthdir_y(rain_speed, rain_direction);
    var px,py;
    
    if !rain_collision_accurate {
        for(i = 0; i &lt; rain_drops * 2; i += 2;) {
            rain[i] += rain_hs
            rain[i+1] += rain_vs
            px = rain[i]
            py = rain[i+1]
            if rain[i+1] &gt; room_height { 
                rain[i] = random_range(x - rain_range, x + rain_range)
                rain[i+1] = y - random(50) 
            }
        }       
    }
    else{
    
        // Prepare direction check array.
        var dx, dy;
        var q = 1+ rain_collision_accurate_skip;
        var n = 0;
        for (i=0; i&lt;=rain_speed; i+=q){
            dx[n] = lengthdir_x(i, rain_direction)
            dy[n] = lengthdir_y(i, rain_direction)
            n++
        }
        
        for (i = 0; i &lt; rain_drops * 2; i += 2) {
        
            px = rain[i]
            py = rain[i+1]
            
            if rain[i+1] &gt; room_height { 
                rain[i] = random_range(x - rain_range, x + rain_range)
                rain[i+1] = y - random(50) 
            }
        }
    }
    
     
    var old_color = draw_get_color();
    draw_set_color(make_color_hsv(130,42,150)) 
    draw_primitive_begin_texture(pr_trianglelist, tex) 
    var n = 0;
    for(i = 0 ;i &lt; rain_drops * 2; i += 2) {
        draw_vertex_texture(rain[i]-rain_size, rain[i+1]+5*rain_size, 0,1) 
        draw_vertex_texture(rain[i]+rain_size, rain[i+1]+5*rain_size, 1,1) 
        draw_vertex_texture(rain[i]-rain_hs*rain_length*rain_size, rain[i+1]-rain_vs*rain_length*rain_size, 0.5,0)  
        n+=3
        if n &gt;= 999 { 
            draw_primitive_end()  
            draw_primitive_begin_texture(pr_trianglelist, tex) 
        }
    }
    draw_primitive_end()  
    draw_set_color(old_color)
     
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG : Change properties.

// Drop count.
if mouse_wheel_up() scrRainSetDropCount(rain_drops + 10)
else if mouse_wheel_down() scrRainSetDropCount(rain_drops - 10)

// Drop size.
if keyboard_check(vk_up) rain_size = min(4, rain_size + 0.1)
if keyboard_check(vk_down) rain_size = max(1, rain_size - 0.1)

// Drop length.
if keyboard_check(vk_right) rain_length = min(2, rain_length + 0.05) 
if keyboard_check(vk_left) rain_length = max(0.1, rain_length - 0.05)



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
