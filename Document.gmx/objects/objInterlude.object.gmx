<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reload = 0
wait = 360
dir = 0
i = 0 
alarm[0]=1+random(100)
alarm[1]=100 + random(400)
alarm[2]=900
fade = 0
c_amount = 0
camount = 0

//Draw stars.
repeat(72) {
    starx[i] = random(room_width)
    stary[i] = random(room_height / 2)
    starsize[i] = random(2) * random(1)
    starintensity[i] = random(1)
    i += 1
}

sunalpha=0
sunshine=0
float=0
horizon=0
//-32,192
/*
repeat(ceil(room_width / 160) + 1) {
    instance_create(i * 160, 160, objCity)
    i += 1
}
*/
instance_create(x,y,objCloud)
instance_create(x,y,objFlock)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fade = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,objFlock)
alarm[1]=400 + random(400)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    shinex = random(room_width)
    shiney = random(room_height / 2)
    star = instance_create(shinex, shiney, objStar)
    star.image_alpha = choose(0.3, 0.5, 0.7, 0.9)
    star.image_xscale = 0.5 + random(2)
    star.image_yscale = image_xscale
    alarm[0]=1+random(100)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if global.revisit=1 room_instance_add(global.interlude,338,272,objPlayerMouseHouse)</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir += 4
//Control room fade.
if wait&gt;0 wait-=1 else fade=1

if sunalpha &gt;= 1 {
    if sunshine &lt; 1 sunshine += 0.05
}
if sunalpha &lt; 1 sunalpha += 0.01

if float &gt;= room_width {
    if horizon &lt; 1 horizon += 0.01
}
if float &lt; room_width float += 0.03

//Draws the background of the room, which is the black-reddish sky.
draw_rectangle_color(-20, -20, room_width + 20, room_height + 20, merge_color(c_black, c_navy, 0.15 + lengthdir_x(0.15, dir * 0.25)), merge_color(c_black, c_navy, 0.15 + lengthdir_x(0.15, dir * 0.25 + 45)), merge_color(c_purple, c_blue, 0.65 + lengthdir_x(0.24, dir * 0.6 + 30)), merge_color(c_purple, c_blue, 0.65 + lengthdir_x(0.24, dir * 0.6)), 0)

//Draw stars.

//i is just a temporary counter.
i = 0

//Draw 72 stars. This can be increased or decreased.
repeat(72) {

    //Draw a silver-white circle, for each iteration from 0 to 72. 
    //starx[i] and stary[y] are randomised variables determining the random position of the stars within the room, and are defined within the Create event.
    //starsize[i] randomises the size of the star and is defined within the Create event.
    //starintensity[i] determines the 'brightness' of the star by randomising the merging of silver with white. If you want all really bright stars, delete
    //random(starintensity[i]) and change it to 1. Conversely, for dull stars, delete it and replace it with 0. Otherwise, leave it.
    draw_circle_color(starx[i], stary[i], starsize[i], merge_color(merge_color(c_silver, c_white, random(1)), c_white, random(starintensity[i])), c_black, 0)
    i += 1
}

//Draw flashing stars.
with objStar {
    draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, merge_color(c_white, merge_color(c_ltgray, c_silver, random(1)), random(1)), 1)
}

//Begin drawing the sun.
draw_set_blend_mode(bm_add)

//Draws the largest outer ring of the sun, which is a reddish tinge.
draw_circle_color(room_width / 2, room_height / 3 + 90, 180 + lengthdir_x(40, dir * 0.25), c_aqua, c_black, 0)

//Draws the innermost smaller ring of the sun, which just barely forms a halo around the sun, and is a pinkish tinge.
draw_circle_color(room_width / 2, room_height / 3 + 90, 80 + lengthdir_x(40, dir * 0.25), c_yellow, c_black, 0)

//Draws a faded version of the sun which is darker.
//draw_sprite_general(sprCitySun, 0, 0, 0, 200, 200, room_width / 2 - 100, room_height / 3, 1, 1, 0, c_red, c_red, merge_color(c_yellow, c_white, objMain.sunalpha + lengthdir_x(0.5, dir)), merge_color(c_yellow, c_white, objMain.sunalpha + lengthdir_x(0.5, dir)), objMain.sunalpha)

//Draw horizon strip.
color = merge_color(merge_color(c_aqua, c_maroon, 0.5 + lengthdir_x(0.5, dir)), merge_color(c_fuchsia, c_yellow, 0.5 + lengthdir_x(0.5, dir)), i * (1 / 138))
draw_rectangle_color(0, room_height / 2 + 4, room_width, room_height / 2 + 33, c_black, c_black, color, color, 0)

draw_set_blend_mode(bm_normal)

//Draws the actual sun itself, which is maroon-red at the top, and slowly fades down to reddish-white.
draw_sprite_general(sprCitySun, 0, 0, 0, 200, 200, room_width / 2 - 100, room_height / 3 - sunalpha * 10, 1, 1, 0, merge_color(c_white, c_yellow, 0.2), merge_color(c_white, c_yellow, 0.2), merge_color(c_yellow, c_white, 0.5 + lengthdir_x(0.5, dir)), merge_color(c_yellow, c_white, 0.5 + lengthdir_x(0.5, dir)), sunalpha)

//End drawing the sun.

//Draw the mountains.
draw_sprite_general(sprMountainDistant, 0, 0, 0, 482, 197, x, y, 1, 1.1, 0, c_black, c_black, merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.1, dir * 0.1)), merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.1, dir * 0.1 + 110)), image_alpha)
draw_sprite_general(sprMountainBack, 0, 0, 0, 482, 197, x, y, 1, 1, 0, c_black, c_black, merge_color(c_black, c_aqua, 0.2 + lengthdir_x(0.1, dir * 0.1)), merge_color(c_black, c_aqua, 0.2 + lengthdir_x(0.1, dir * 0.1 + 110)), image_alpha)
draw_sprite_general(sprMountainMid, 0, 0, 0, 482, 197, x, y, 1, 1, 0, c_black, c_black, merge_color(c_black, c_aqua, 0.1 + lengthdir_x(0.1, dir * 0.1)), merge_color(c_black, c_aqua, 0.1 + lengthdir_x(0.1, dir * 0.1 + 110)), image_alpha)
draw_sprite_general(sprMountainFront, 0, 0, 0, 482, 197, x, y, 1, 1, 0, c_black, c_black, merge_color(c_black, c_black, 0.2 + lengthdir_x(0.1, dir * 0.1)), merge_color(c_black, c_black, 0.2 + lengthdir_x(0.1, dir * 0.1 + 110)), image_alpha)

with objBird draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, 1)

if fade = 0 {
    if c_amount &lt; 180 {
        c_amount += 10
        color1 = merge_color(c_black, merge_color(c_aqua, c_white, 0.5 + lengthdir_x(0.5, c_amount)), 0.5 + lengthdir_x(0.5, c_amount))
        if c_amount &gt; 90 color2 = merge_color(c_black, merge_color(c_fuchsia, c_white, abs(lengthdir_y(1, c_amount))), abs(lengthdir_y(1, c_amount)))
        else color2 = c_white
        draw_set_blend_mode(bm_subtract)
        draw_rectangle_color(view_xview[0] - 10, view_yview[0] - 10, view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, color1, color2, color2, color1, 0)
        draw_set_blend_mode(bm_normal)
    }
}

//Causes the entire room to move.
view_angle[0] = lengthdir_y(1, dir * 0.83)

if fade = 1 {
    if c_amount &gt; 0 {
        c_amount -= 5
        if global.revisit = 1 {
            sxeasy_setVolume(c_amount * (1 / 180))
        }
        color1 = merge_color(c_black, merge_color(c_aqua, c_white, 0.5 + lengthdir_x(0.5, c_amount)), 0.5 + lengthdir_x(0.5, c_amount))
        if c_amount &gt; 90 color2 = merge_color(c_black, merge_color(c_fuchsia, c_white, abs(lengthdir_y(1, c_amount))), abs(lengthdir_y(1, c_amount)))
        else color2 = c_white
        draw_set_blend_mode(bm_subtract)
        draw_rectangle_color(view_xview[0] - 10, view_yview[0] - 10, view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, color2, color1, color1, color2, 0)
        draw_set_blend_mode(bm_normal)
    } else {
        if global.revisit = 1 {
            sxeasy_stop() sxeasy_setVolume(1) if string_length(global.song) &gt; 0 {
                if global.nextlevel = rmSequence12bDownstairs nothing = 1
                else sxeasy_play(global.song)
            }
        }
        room_goto(global.interlude)
    }
}

//The entire scene shifts back and forth.
view_angle[0] = lengthdir_y(0.4, dir * 0.33)
d3d_set_projection_ortho(0, 0, view_wview[0], view_hview[0], 0)

/*if fade = 0 {
    if c_amount &lt; 180 {
        c_amount += 5
        if c_amount &gt; 180 c_amount = 180
        color1 = merge_color(c_black, merge_color(c_white, c_black, 0.5 + lengthdir_x(0.5, c_amount)), 0.5 + lengthdir_x(0.5, c_amount))
        if c_amount &gt; 90 color2 = merge_color(c_black, merge_color(c_white, c_dkgray, abs(lengthdir_y(1, c_amount))), abs(lengthdir_y(1, c_amount)))
        else color2 = c_white
        draw_set_blend_mode(bm_subtract)
        draw_rectangle_color(view_xview[0] - 20, view_yview[0] - 20, view_xview[0] + view_wview[0] + 20, view_yview[0] + view_hview[0] + 20, color1, color2, color2, color1, 0)
        draw_set_blend_mode(bm_normal)
    }
}

if fade = 1 {
    if c_amount &gt; 0 {
        c_amount -= 5
        if global.revisit = 1 {
            scrSongVolume(c_amount * (1 / 180))
        }
    } else {
        if global.revisit = 1 {
            scrStopSong() scrSongVolume(1) if string_length(global.song) &gt; 0 {
                if global.nextlevel = rmSequence12bDownstairs nothing = 1
                else scrPlaySong(global.song)
            }
        }
        room_goto(global.interlude)
    }
}*/
    draw_set_blend_mode(bm_subtract)
    my_y = random(32)
    my_x = random(32)
    draw_sprite_tiled_ext(sprNoise, 0, -my_x, -my_y, 1, 1, c_white, 1)
    draw_circle_color(room_width / 2, room_height / 2, room_width * 0.8 + random(10), c_black, c_gray, 0)
    draw_set_blend_mode(bm_normal)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
