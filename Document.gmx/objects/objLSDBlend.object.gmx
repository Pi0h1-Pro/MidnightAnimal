<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf=surface_create(view_wport[0],view_hport[0])

surface_set_target(surf) 
draw_clear_alpha(c_black,0)
surface_reset_target()

surf2=surface_create(view_wport[0],view_hport[0])

surface_set_target(surf2) 
draw_clear_alpha(c_black,0)
surface_reset_target()


dir=0

h=0

screenx=view_xview[0]
screeny=view_yview[0]





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if h &lt; 255 h += 1
else h = 0
scale = -0.1 + lengthdir_x(0.25, dir) //0.5+lengthdir_x(2,dir)

if !surface_exists(surf) {
    surf = surface_create(view_wport[0], view_hport[0])
    surface_set_target(surf)
    draw_clear_alpha(c_black, 0)
    surface_reset_target()
}

if !surface_exists(surf2) {
    surf2 = surface_create(view_wport[0], view_hport[0])
    surface_set_target(surf2)
    draw_clear_alpha(c_black, 0)
    surface_reset_target()
}

surface_copy(surf2, 0, 0, surf)
surface_set_target(surf)
draw_clear_alpha(c_white, 0)
d3d_set_projection_ortho(0, 0, view_wview[0], view_hview[0], 0)
texture_set_interpolation(1)

if abs(scale) = 0 draw_surface_ext(surf2, -0.5 + random(1), -0.5 + random(1), 1, 1, 0, c_white, 0.999)
else draw_surface_ext(surf2, screenx - view_xview[0] + scale * 0.5 + (-0.5 + random(1)) * (1 / 3), screeny - view_yview[0] + scale * 0.5 + (-0.5 + random(1)) * (1 / 3), (1 + abs((scale / (surface_get_width(surf2) * (1 / 3))) * 2)) * (1 / 3), (1 + abs((scale / (surface_get_height(surf2) * (1 / 3))) * 2)) * (1 / 3), 0, merge_color(c_white, make_color_hsv(h, 255, 255), 0.1), 0.999)
texture_set_interpolation(0)
draw_set_blend_mode(bm_subtract)
    repeat(60) {
        draw_sprite_ext(sprDisappear, random(7), round(random(view_wview[0])), round(random(view_hview[0])), 0.25 + random(0.25), 0.25 + random(0.25), random(360), c_white, 1)
    }
    draw_set_blend_mode(bm_normal)


with objRainbow {
    draw_set_blend_mode(bm_add)
    i = 0
    repeat(7) {
            if i = 0 color = c_red
            if i = 1 color = c_orange
            if i = 2 color = c_yellow
            if i = 3 color = c_lime
            if i = 4 color = c_aqua
            if i = 5 color = c_blue
            if i = 6 color = c_fuchsia
            mycolor1 = merge_color(merge_color(color, merge_color(c_aqua, c_purple, 0.5 + lengthdir_x(0.5, dir * 0.1)), 0.35), c_black, 0.95 + lengthdir_x(0.05, dir + i * 20))
            mycolor2 = merge_color(merge_color(color, merge_color(c_aqua, c_purple, 0.5 + lengthdir_x(0.5, dir * 0.1)), 0.35), c_black, 0.95 + lengthdir_x(0.05, dir + 90 + i * 20))
            draw_rectangle_color(x1 - view_xview[0] + i * 16, y1 - view_yview[0], x1 - view_xview[0] + i * 16 + 16, y2 - view_yview[0], c_black, c_black, mycolor1, mycolor2, 0)
            addx = random(16)
            draw_line_color(x1 - view_xview[0] + i * 16 + addx, y2 - view_yview[0], x1 - view_xview[0] + i * 16 + addx, (y2 * (0.4 + random(0.3))) - view_yview[0], merge_color(mycolor1, c_black, 0.7 + random(0.1)), c_black)
            i += 1
        }
    draw_set_blend_mode(bm_normal)
    dir += 4
}

with objSurfacer draw_surface_ext(surf, -view_xview[0], -view_yview[0], 0.5, 0.5, 0, c_white, 1)
with objLSDBushVines draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, image_angle, image_blend, image_alpha)
with objShard draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, image_angle, image_blend, image_alpha)
with objIntestine draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, image_angle, image_blend, image_alpha)
with objBrains draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, image_angle, image_blend, image_alpha)
with objPlayerDead draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, image_angle, image_blend, image_alpha)
with objBodyPart draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, image_angle, image_blend, image_alpha)
with objDeadBody {
    visible = 0
    draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, image_angle, image_blend, image_alpha)
}
with objPlayerDead {
    draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, image_angle, image_blend, image_alpha)
}

with objPlayerMouse {
    legsprite = sprLegs
    if aimon = 1 {
        dir = point_direction(x, y, global.mousex, global.mousey)
    }

    draw_sprite_ext(legsprite, legindex, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, legdir, image_blend, image_alpha)
    draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, left, dir, image_blend, image_alpha)
    if reload &gt; 0 reload -= 1
    if light &gt; 3 light -= 3
    sprite = -1234
    if sprite_index = sprPWalkShotgunLSD sprite = sprPShotgunLSD
    if sprite_index = sprPAttackShotgunLSD sprite = sprPShotgunAttackLSD
    if sprite_index = sprPWalkAKLSD sprite = sprPAKLSD
    if sprite_index = sprPAttackAKLSD sprite = sprPAKAttackLSD
    if sprite_index = sprPWalkM16LSD sprite = sprPM16LSD
    if sprite_index = sprPAttackM16LSD sprite = sprPM16AttackLSD
    if sprite_index = sprPWalkSilencerLSD sprite = sprPSilencerLSD
    if sprite_index = sprPAttackSilencerLSD sprite = sprPSilencerAttackLSD
    if sprite_exists(sprite) {
        amount = -1 + lengthdir_x(2, walkdir * 0.25)
        if amount &lt; 0 amount = 0
        color1 = merge_color(merge_color(c_dkgray, c_black, 0.5), make_color_hsv(h1, random(127 + lengthdir_x(127, walkdir * 3.25)), 255), amount)
        color2 = merge_color(merge_color(c_dkgray, c_black, 0.5), make_color_hsv(h2, random(127 + lengthdir_x(127, walkdir * 4)), 255), amount)
        if h1 &lt; 251 h1 += 4
        else h1 = 0
        if h2 &lt; 248 h2 += 7
        else h2 = 0
        draw_sprite_general(sprite, image_index, 0, 0, sprite_get_width(sprite), sprite_get_height(sprite), x + scrPosDirX(-sprite_get_xoffset(sprite), -sprite_get_yoffset(sprite), dir), y + scrPosDirY(-sprite_get_xoffset(sprite), -sprite_get_yoffset(sprite), dir), image_xscale, left, dir, color1, color2, color2, color1, image_alpha)
    }
}

with objLSDSmoke {
    if depth = 1 draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, image_angle, image_blend, image_alpha)
}

with objLSDSmoke {
    if depth = -1 draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, image_angle, image_blend, image_alpha)
}

with objLSDBush draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, image_angle, image_blend, image_alpha)

with objPalmTreeLSD {
    if on = 1 {
        i = 0
        repeat(branches) {
            draw_sprite_ext(sprPalmTreeLeafLSD, branchindex[i], x - view_xview[0] + lengthdir_x(10, branchdir[i]), y - view_yview[0] + lengthdir_y(10, branchdir[i]), 1 + lengthdir_x(0.05, branchsway[i] * 0.87), branchscale[i], branchdir[i] + lengthdir_x(branchangle[i], branchsway[i]), merge_color(blend[i], merge_color(c_blue, c_white, 0.5), 0.25 + lengthdir_x(0.25, branchsway[i] * 4)), 1)
            branchsway[i] += 0.5 + lengthdir_x(0.25, sway)
            i += 1
        }
        draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale + lengthdir_x(0.025, sway * 0.71), image_yscale + lengthdir_x(0.025, sway * 0.71), image_angle + lengthdir_x(2, sway), merge_color(merge_color(c_teal, c_purple, 0.2), merge_color(c_blue, c_white, 0.5), 0.5 + lengthdir_x(0.25, sway * 4)), image_alpha)
        sway += 0.78
    }
}
with objBigTreeLSD {
    if on {
        draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale + lengthdir_x(0.025, sway * 0.71), image_yscale + lengthdir_x(0.025, sway * 0.71), image_angle + lengthdir_x(2, sway), merge_color(merge_color(c_teal, c_aqua, 0.2), merge_color(c_blue, c_white, 0.5), 0.5 + lengthdir_x(0.25, sway * 4)), image_alpha)
        sway += 0.78
    }
}
with objLSDParticle {
    draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, image_angle, image_blend, image_alpha)
}

with objAngelLSD {
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}

with objEnemyFatLSD {
    angle = direction
    if speed &gt; 0 or path_index &gt;= 0 draw_sprite_ext(sprEFatLegs, image_index * 2, x - view_xview[0], y - view_yview[0], image_xscale, image_yscale, direction, image_blend, 1)
    draw_sprite_ext(sprite_index, image_index, x - view_xview[0] + 1, y - view_yview[0] + 1, image_xscale, left, angle, c_black, 0.5)
    draw_sprite_ext(sprite_index, image_index, x - view_xview[0], y - view_yview[0], image_xscale, left, angle, image_blend, image_alpha)
}

surface_reset_target()

dir += 0.5
d3d_set_projection_ortho(view_xview[0], view_yview[0], view_wview[0], view_hview[0], view_angle[0])

screenx = view_xview[0]
screeny = view_yview[0]

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(surf)
surface_free(surf2)
surf=-1234
surf2=-1234
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(surf) {
    draw_surface_ext(surf, view_xview[0] + 1, view_yview[0], 1 / 3, 1 / 3, 0, c_black, 1)
    draw_surface_ext(surf, view_xview[0], view_yview[0] + 1, 1 / 3, 1 / 3, 0, c_black, 1)
    draw_surface_ext(surf, view_xview[0] - 1, view_yview[0], 1 / 3, 1 / 3, 0, c_black, 1)
    draw_surface_ext(surf, view_xview[0], view_yview[0] - 1, 1 / 3, 1 / 3, 0, c_black, 1)
    draw_surface_ext(surf, view_xview[0], view_yview[0], 1 / 3, 1 / 3, 0, c_white, 1)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
