<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprVendingMachine</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1005</depth>
  <persistent>0</persistent>
  <parentName>objFurniture</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description  Assign properties.
image_speed = 0
energie = 3
life = 30
c = choose(2, 3, 4, 5)
image_index = 0
on = 1
can_vend = true
wait = 45
delivered = false
vend_delay = 640
alarm[0] = vend_delay
alamr[1] = wait

// Object shake.
shake = 0

if on = 1 and sprite_index = sprVendingMachine {
    if c = 2 light = make_colour_rgb(128, 255, 255)// aqua
    if c = 3 light = make_colour_rgb(255, 252, 77)// yellow
    if c = 4 light = make_colour_rgb(64, 255, 64)// lime
    if c = 5 light = make_colour_rgb(255, 128, 255)// pink
   //with light glr_light_set_rotation(my_light, other.image_angle)
} 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deliver the goods.
sound_ps(choose(sndVendingMachine1, sndVendingMachine2))
can = instance_create(x + lengthdir_x(8, image_angle), y + lengthdir_y(8, image_angle), objSodaCan)
can.speed = 2 + random(2)
can.friction = 0.2
can.direction = image_angle - 8 + random(16)
can.image_angle = can.direction
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if can_vend = false can_vend = true
wait = 45
delivered = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if shake &gt; 0 shake -= 0.1

if sprite_index = sprVendingMachineBroken {
    if life &gt; 0 {
        life -= 1
        if round(random(10)) = 2 {
            my_id = instance_create(x, y, objElectricity)
            my_id.direction = random(360)
            my_id.speed = random(1)
        }
        if round(random(2)) = 1 {
            my_id = instance_create(x - 5 + random(10), y - 5 + random(10), objElectricSpark)
            my_id.direction = point_direction(x, y, my_id.x, my_id.y)
            my_id.speed = 3 + random(2)
            my_id.image_angle = my_id.direction
        }
    } else {
        image_speed = 0 image_index = 0 depth = -2
    }
    exit
}

// Get shit from the machine.
if instance_exists(objPlayer) and sprite_index = sprVendingMachine {

    if on = 1 {
        if point_distance(x, y, objPlayer.x, objPlayer.y) &lt; 32 and can_vend = true {
            if keyboard_check_pressed(global.interactkey) {
                sound_ps(sndVendingMachinePress)
                sound_ps(sndMineDing)
                can_vend = false
                alarm[0] = vend_delay
                alarm[1] = wait 
            }
        }
    }

    // Destroy machine.
    if scrIsSwinging(objPlayer.sprite_index) and place_meeting(x - lengthdir_x(12, objPlayer.dir), y - lengthdir_y(12, objPlayer.dir), objPlayer) {
        if life &gt; 0 sound_ps(choose(sndElectricSpark1, sndElectricSpark2))
        image_index = choose(0, 1)
        on = 0
        depth = -2
        shake = 1.5
        sound_ps(sndGlass1)
        i = 0
        repeat(12) {
            my_id = instance_create(x + lengthdir_x(5, image_angle - 45 + i * (90 / 12)), y + lengthdir_y(5, image_angle - 45 + i * (90 / 12)), objTVShards)
            my_id.direction = image_angle - 45 + i * (90 / 12)
            my_id.speed = 1 + random(3)
            i += 1
        }
        repeat(8) {
            length = 1 + random(2)
            my_id = instance_create(x + lengthdir_x(length, i * (360 / 8)), y + lengthdir_y(length, i * (360 / 8)), objFirePuff)
            my_id.image_angle = i * (360 / 8) - 180
            my_id.direction = my_id.image_angle - 180
            my_id.speed = 0.5 + random(1)
            my_id.friction = 0.1
            i += 1
        }
        repeat(4) {
            my_id = instance_create(x - 4 + random(8), y - 4 + random(8), objFireBall)
            my_id.direction = point_direction(x, y, my_id.x, my_id.y)
            my_id.speed = 0.25 + random(0.25)
        }

        repeat(16) {
            my_id = instance_create(x, y, objFireSpark)
            my_id.direction = random(360)
            my_id.speed = 3 + random(3)
            my_id.image_angle = my_id.direction
        }

        sprite_index = sprVendingMachineBroken
        global.combo += 1
        global.combotime = 240
        global.deathshake = 10
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description  Destroy vending machine.
if sprite_index = sprVendingMachineBroken exit
image_xscale = 3
image_yscale = 3
global.my_id = id
bullets = 0
shake = 1.5
with other {
    global.my_id.bullets += 1
    scrBulletImpact()
    my_id = instance_create(x, y, objSmokeHit)
    my_id.color1 = c_gray
    my_id.color2 = c_dkgray
    my_id.image_angle = image_angle
    my_id.direction = image_angle
    my_id.speed = random(1)
    instance_destroy()
    alert = 1
}
image_xscale = 1
image_yscale = 1
if sprite_index = sprVendingMachine {
    sprite_index = sprVendingMachineBroken
    depth = -2
    global.shake = 3
    global.combo += 1
    global.combotime = 240
    global.deathshake = 10
    sound_ps(sndGlass1)
    sound_ps(choose(sndElectricSpark1, sndElectricSpark2))
    on = 0
    i = 0
    repeat(12) {
        my_id = instance_create(x + lengthdir_x(5, image_angle - 45 + i * (90 / 12)), y + lengthdir_y(5, image_angle - 45 + i * (90 / 12)), objTVShards)
        my_id.direction = image_angle - 45 + i * (90 / 12)
        my_id.speed = 1 + random(3)
        i += 1
    }
    repeat(8) {
        length = 1 + random(2)
        my_id = instance_create(x + lengthdir_x(length, i * (360 / 8)), y + lengthdir_y(length, i * (360 / 8)), objFirePuff)
        my_id.image_angle = i * (360 / 8) - 180
        my_id.direction = my_id.image_angle - 180
        my_id.speed = 0.5 + random(1)
        my_id.friction = 0.1
        i += 1
    }
    repeat(4) {
        my_id = instance_create(x - 4 + random(8), y - 4 + random(8), objFireBall)
        my_id.direction = point_direction(x, y, my_id.x, my_id.y)
        my_id.speed = 0.25 + random(0.25)
    }

    repeat(16) {
        my_id = instance_create(x, y, objFireSpark)
        my_id.direction = random(360)
        my_id.speed = 3 + random(3)
        my_id.image_angle = my_id.direction
    }

    global.combo += 1
    global.combotime = 240
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if on = 1 and sprite_index = sprVendingMachine {
    if !scrMovingPlayerExists() exit
    if point_distance(x, y, objPlayer.x, objPlayer.y) &lt; 32 and can_vend = true {
        draw_sprite_ext(sprite_index,1,x + irandom_range(-shake, shake)+1,y + irandom_range(-shake, shake)+1,image_xscale,image_yscale,image_angle,c_black,0.5)
        draw_sprite_ext(sprite_index,1,x + irandom_range(-shake, shake),y + irandom_range(-shake, shake),image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    } else {
        draw_sprite_ext(sprite_index,0,x + irandom_range(-shake, shake)+1,y + irandom_range(-shake, shake)+1,image_xscale,image_yscale,image_angle,c_black,0.5)
        draw_sprite_ext(sprite_index,0,x + irandom_range(-shake, shake),y + irandom_range(-shake, shake),image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    }
    
    draw_set_blend_mode(bm_add)
    draw_sprite_ext(sprite_index,c,x + irandom_range(-shake, shake),y + irandom_range(-shake, shake),image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    draw_reset()
    
    draw_set_color(light)
    draw_lens_flare(x,y,20,2,2,1,choose(3,4,5),choose(0.5,0.6,0.7))
} else {

    if sprite_index = sprVendingMachineBreak {
        if image_index = 0 {
            draw_sprite_ext(sprVendingMachineBreak,image_index,x + irandom_range(-shake, shake)+1,y + irandom_range(-shake, shake)+1,image_xscale,image_yscale,image_angle,c_black,0.5)
            draw_sprite_ext(sprVendingMachineBreak,image_index,x + irandom_range(-shake, shake),y + irandom_range(-shake, shake),image_xscale,image_yscale,image_angle,image_blend,image_alpha)
        } else {
            draw_sprite_ext(sprVendingMachineBreak,image_index,x + irandom_range(-shake, shake)+1,y + irandom_range(-shake, shake)+1,image_xscale,image_yscale,image_angle,c_black,0.5)
            draw_sprite_ext(sprVendingMachineBreak,image_index,x + irandom_range(-shake, shake),y + irandom_range(-shake, shake),image_xscale,image_yscale,image_angle,image_blend,image_alpha)
            
            draw_set_blend_mode(bm_add)
            draw_sprite_ext(sprite_index,c,x + irandom_range(-shake, shake),y + irandom_range(-shake, shake),image_xscale,image_yscale,image_angle,image_blend,image_alpha)
            draw_reset()
            
            draw_set_color(light)
            draw_lens_flare(x,y,20,2,2,1,choose(3,4,5),choose(0.5,0.6,0.7))    
        }
    }
    
    if sprite_index = sprVendingMachineBroken {
        draw_sprite_ext(sprVendingMachineBroken,image_index,x + irandom_range(-shake, shake)+1,y + irandom_range(-shake, shake)+1,image_xscale,image_yscale,image_angle,c_black,0.5)
        draw_sprite_ext(sprVendingMachineBroken,image_index,x + irandom_range(-shake, shake),y + irandom_range(-shake, shake),image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
