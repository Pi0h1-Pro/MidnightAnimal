<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPWalkUnarmed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise variables.

// Initialise characters.
init_character()

global.automatic = 1 // Automatic / semi-automatic fire rate.

// Shield.
shield = 0
ready = 0
fire_delay = 30
played = 0

// Floor controls.
save = 0
alarm[0] = 5

// Light amounts.
bamount = 1
amount = 0

// Ammunition.
grenades = 0
thrown = 0

// Variables for consuming things.
exhaled = 0
drink = 0

// Controls level of scope zoom with sniper rifles.
global.scopeZoom = 0

// Set global reload speed.
global.reloadspeed = 0.2

muzzle = 0
melee_damage = 0

// Auto-aim; off by default.
autoaim = 0

// Lock-on; temporary variable to check if the player is locked on.
lockon = 0

// Burst fire.
burststate = 0
firecount = 0
burstdelay = 1
pausedelay = 5
wburst = 0

dead = 0 
finish = 0
drop = 0
grenades = 6
berserk = 0

image_speed = 0
global.done = 0
legsprite = sprJohnLegs

execution = 0
mags = 0
nothing = 0
currentweapon = 0
dir = 0
movex = 0
movey = 0
move = 0
viewspeed = 0
myxspeed = 0
myyspeed = 0
myspeed = 0
reload = 5
light = 0
legdir = 0
legindex = 0
left = 1
ammo = 0
wait = 0
lastflame = -1234
walkdir = 0

// Variables for blink.
rollreload = 0
rollx = 0
rolly = 0
blink = 0

// Variables for teleporting.
teleport = false
teleporting = false
teleport_fade = true

// Variables for dual-wielding.
aimon = 1
armangle = 0
index = 0
addangle = 0
ready = 0

// Variables for charge shot.
global.charge_counter = 0
global.max_charge = 36
charged = 0

scrInitTurning()
last_sprite = sprite_index
character = global.character
release = 0
aim = 0
global.enemy = -1234
clear = 0
throwreload = 0
exhaled =0 

// Initialise scaling.
xfactor = 1
yfactor = 1
factor = 0

// Drop blood if health is less than maximum.
//if sprite_index = sprPWalkGunsmith alarm[3] = 20 + random(20)

// Dash variables.
DashTimer = 5;
d_dist = 15; // Dash distance. Raise to increase values.

// Create finite states.
state_machine_init();

state_create("Default",fsPlayerDefault);
state_create("Dash",fsPlayerDash);
state_init("Default");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom in variables.
base_width = view_wview[0] / 2
base_height = view_hview[0] / 2
view_zoom_level = 100
view_zoom_type = "none"
view_zoom_step = 0
view_zoom_change = 0.05
view_zoom_factor = 1
view_zoom_max = 32
view_zoom_min = 180
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ABILITIES 3.
if sprite_index = pierretteWalkUnarmed and ready = 0 {
    sprite_index = pierretteReadyUp
    image_index = 0 
    image_speed = 0.2
    sound_ps(sndPickUpGeneric)
    sound_ps(sndRecharge)
    sound_ps(sndReadyUp)
    audio_emitter_gain(sndReadyUp, 0.5)
    ready = 1
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create particle systems.

steps = false
steps_duration = 40
steps_count = steps_duration
steps_rate = 120
steps_side = 1

//audio_listener_orientation(0, 1, 0, 0 , 0, 1)

// Smoke trail for gun.

// Steam.
boiling_steam = part_system_create()
steam = part_type_create()
part_system_depth(steam, -10)
part_type_scale(steam, 1, 1)
part_type_direction(steam, dir, dir, 0, 0)
part_type_shape(steam, pt_shape_smoke)
part_type_size(steam, 0.1, 0.3, -.01, 0)
part_type_colour2(steam, c_gray, c_white)
part_type_blend(steam, 0)
part_type_alpha2(steam, 0.5, 0.3)
part_type_life(steam, room_speed * 0.2, room_speed * 0.4)

// Flames.
fire = part_system_create()
part_system_depth(fire, -1003)
flame = part_type_create()
smoke = part_type_create()
dirc = 0
part_type_colour2(flame, c_yellow, c_red)
part_type_direction(flame, dirc-1, dirc+1, 0, 0)
part_type_life(flame, 20, 30)
part_type_shape(flame, pt_shape_smoke)
part_type_speed(flame, 6, 12, 0, 0.25)
part_type_size(flame, 0.08, 0.12, 0.014, 0.003)
part_type_alpha3(flame, 1, 0.8, 0)
part_type_blend(flame, 1)

part_type_colour2(smoke, c_gray, c_black)
part_type_direction(smoke, dirc-1, dirc+1, 0, 0)
part_type_life(smoke, 30, 40)
part_type_shape(smoke, pt_shape_smoke)
part_type_speed(smoke, 5, 11, 0, 0.25)
part_type_size(smoke, 0.08, 0.12, 0.014, 0.003)
part_type_alpha3(smoke, 1, 0.8, 0)
part_type_blend(smoke, 0)

em = part_emitter_create(fire)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset throw.
if thrown = 1 thrown = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save floor.
scrSaveFloor()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Floor control.
if persistent=0 nothing=1 else active=1
persistent=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FSM: update state.
state_update()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG: CHANGE CHARACTER
if keyboard_check_pressed(ord("0")) {
    global.character = 0
    sprite_index = sprPWalkUnarmed
}
if keyboard_check_pressed(ord("1")) {
    global.character = 1
    sprite_index = thomasWalk
}
if keyboard_check_pressed(ord("2")) {
    global.character = 2
    sprite_index = pierretteWalkUnarmed
}
if keyboard_check_pressed(ord("3")) {
    global.character = 3
    sprite_index = simoneWalk
    ammo = 6
}

if global.character = 2 {
    if keyboard_check_pressed(ord("J")) {
        sprite_index = pierretteWalkShotgun
        ammo = 144
    }
    
    if keyboard_check_pressed(ord("K")) {
        sprite_index = pierretteWalkSMG
        ammo = 32
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FSM: Execute state.
state_execute()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player behaviour.

// Regulate muzzle flash.
if muzzle &gt; 0 muzzle -= 3 else muzzle = 0

// State holder.
global.state = 0

// Normalise health display.
hp_norm = (hp / max_hp) * 100
if hp &lt; 0 hp = 0
if hp &gt; max_hp hp = max_hp

// COMBAT //
if global.active = 1 {

    // General attacks.
    scrPlayerKill()
    //scrPlayerAttackUnarmed()
    
    // Fire certain guns one-handed.
    scrPlayerFlipGun()
    
    // Reloading weapons.
    scrPlayerReload()
    
    // Camera control.
    scrPlayerAim()
    
    // Disarm weapons.
    scrPlayerDisarm()
    
    // Animate player states.
    scrPlayerAnimate()
}

// Advance leg movement.
walkdir += 2

// Drop weapon if level is complete.
if global.done = 1 scrPlayerFinishLevel()

// Fade screen out based on player's health.
global.var_greyscale_fade = 0.5 / (hp / max_hp) 
if global.var_greyscale_fade &lt; 0.1 global.var_greyscale_fade = 0.1
if global.var_greyscale_fade &gt; 1 global.var_greyscale_fade = 1

// Hide player in vegetation.
if place_meeting(x, y, objVegetation) global.dist_detection = 10 else global.dist_detection = 320

// Cover states for Pierrette .
if global.character = 2 {
    if instance_exists(maskShield) {
        if pierretteIsShielded(sprite_index) maskShield.cover = true else maskShield.cover = false
    }
    
    // Shield benefits.
    if pierretteHasShield(sprite_index) {
        if hp &lt; max_hp hp += 0.75
    }
}

// Idle animations.
scrPlayerIdleStates()

previousx = x
previousy = y

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controller input.
if gamepad_is_connected(0) {

    // Movement.
    scrControllerMove()
    
    // X / square to reload.
    if gamepad_button_check_pressed(0, gp_face3) scrGetPlayerReload()
    
    // A / X to execute.
    if gamepad_button_check_pressed(0, gp_face1) scrPlayerExecute()
    
    // LT / L2 to lock onto enemies.
    if gamepad_button_check_pressed(0, gp_shoulderlb) scrLockOn()
    
    // LB / L1 to dash.
    if gamepad_button_check(0, gp_shoulderl) {
        if state_name="Default"{
            if (abs(myxspeed)+abs(myyspeed)) != 0 {
                sound_ps(sndDash)
                state_switch("Dash")
            }
        }
    }
    
    // RT / R2 to fire.
    if gamepad_button_check_pressed(0, gp_shoulderrb) {
    
        ///Semi-automatic / melee weapons.
        if scrIsDisarming() or reload &gt; 0 or teleport = true exit
        
        // Melee weapons.
        scrPlayerAttackMelee()
        
        // Firearms.
        if ammo &gt; 0 and !scrIsReloading(sprite_index) {
            scrPlayerShootSemi()
            scrPlayerCreateBurstFire()
            image_angle = 0
        } 
    }
    
    if gamepad_button_check(0, gp_shoulderrb) {
        if active = 1 scrPlayerAttackAuto() 
    }
    
    // RB / R1 to pick up / throw weapons.
    if gamepad_button_check_pressed(0, gp_shoulderr) {
        if scrIsDisarming() exit
        if sprite_index = sprPWalkDW 
        or sprite_index = sprPReloadDW 
        or sprite_index = sprPTurnDW exit
        if global.active = 0 exit
        
        // Disarm weapons; otherwise, pick them up.
        if global.character = 0 scrPlayerPickUpWeapon()
        if global.character = 1 scrPlayerPickUpNonlethal()
    }
    
    // Set vibration.
    gamepad_set_vibration(0, global.shake / 15, global.shake / 15)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lock on.
if mouse_check_button_pressed(mb_right) and lockon = 0
and global.character != 1 and global.character != 2 and global.character != 3 {
    scrLockOn()
    lockon = 1
} else if mouse_check_button_released(mb_right) and lockon = 1
and global.character != 1 and global.character != 2 and global.character != 3 {
    global.enemy = -1234
    lockon = 0
}

// PIERRETTE
if global.character = 2 {
    if mouse_check_button_pressed(mb_right) {
        if sprite_index = pierretteWalkShield sprite_index = pierretteAimShield
        if instance_exists(maskShield) maskShield.cover = false
    } else if mouse_check_button_released(mb_right) {
        if sprite_index = pierretteAimShield sprite_index = pierretteWalkShield
        if instance_exists(maskShield) maskShield.cover = true
    }
}

// SIMONE
if global.character = 3 {
    if mouse_check_button_pressed(mb_right) {
        if sprite_index = simoneWalk { sprite_index = simoneAim image_index = 0 image_speed = 0.5 }
    } else if mouse_check_button_released(mb_right) {
        if sprite_index = simoneAim sprite_index = simoneWalk
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ABILITY : Blink.

if global.active = 0 exit
if global.character != 0 exit

// Check to see if we can teleport.
if keyboard_check(ord('F')) teleport = true else teleport = false

if teleporting = true {
    if teleport_fade = true {
    
        // If visible, decrease alpha.
        if image_alpha &gt; 0 image_alpha -= 0.1
        else {
        
            // If invisible, move to new x and y.
            randomize()
            x = xx
            y = yy 
            image_angle = dir
            
            // Fade out phase is complete.
            teleport_fade = false
        }
    } else {
    
        // If not yet fully opaque, increase alpha.
        if image_alpha &lt; 1 image_alpha += 0.1 else {
        
            // If fully opaque, fade in sequence and teleportation complete. 
            teleporting = false
            teleport_fade = true
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ABILITY : Charge attacks.

if global.active = 0 exit

// Charged pistol.
if sprite_index = sprPWalkCharger {
    //if mouse_check_button_pressed(mb_left) sound_ps(sndFMG9)
    
    if mouse_check_button(mb_left) {
        global.shake ++
        if global.shake &gt; 18  global.shake = 18
        global.charge_counter ++
    }
    
    if global.charge_counter &gt;= global.max_charge and charged = 0 {
        sound_ps(sndRecharge)
        charged = 1
    }
    
    if mouse_check_button_released(mb_left) {
        if global.charge_counter &gt; global.max_charge {
            sound_ps(sndIntervention)
            ammo -= 1
            reload = 7
            global.shake = 15
                repeat(2) {
                    my_id = instance_create(x + lengthdir_x(26, dir), y + lengthdir_y(26, dir), objRicochetingShot)
                    if instance_exists(my_id) {
                        my_id.direction = dir - 4 + random(8)
                        my_id.speed = 24
                        my_id.image_angle = my_id.direction
                        scrCreateMuzzleFlash(26)
                    }
                }
            my_id = instance_create(x + lengthdir_x(5, dir - 5 * left), y + lengthdir_y(5, dir - 5 * left), objShell)
            my_id.sprite_index = sprShotgunShell
            my_id.image_angle = dir
            my_id.direction = dir - 90 * left - 20 + random(30)
            my_id.speed = (1 + random(3))  
            sound_ps(choose(snd12GA1, snd12GA2, snd12GA3))
            sprite_index = sprPAttackChargerCharged
            image_speed = 0.6
            image_index = 0
        }   
        global.charge_counter = 0
        charged = 0
    }
}

// Leviathan swords.
if scrCurrentWeaponExt(sprite_index) = 80 {
    
    if mouse_check_button(mb_right) global.charge_counter ++
    
    if global.charge_counter &gt;= 10 and charged = 0 {
        instance_create(x, y, objPsychicCharged)
        sound_ps(sndLeviathanCharged)
        charged = 1
    }
    
    if mouse_check_button_released(mb_right) {
        if global.charge_counter &gt; 10 {
        
            shock = instance_create(x, y, objPulseRipple)
            shock.image_xscale = 0.8
            shock.image_yscale = shock.image_xscale             
        
            // Create swords.
            sound_ps(sndBlisteringSwords)

            blade1 = instance_create(x, y , objBlisteringSwords)
            blade1.direction = 90
            blade1.speed = 24
            blade1.image_angle = 270
            blade1.image_xscale = -1.5
            blade1.image_yscale = -1.5
            
            blade2 = instance_create(x, y , objBlisteringSwords)
            blade2.direction = 180
            blade2.speed = 24
            blade2.image_angle = 0
            blade2.image_xscale = -1.5
            blade2.image_yscale = -1.5
            
            blade3 = instance_create(x, y , objBlisteringSwords)
            blade3.direction = 270
            blade3.speed = 24
            blade3.image_angle = 90
            blade3.image_xscale = -1.5
            blade3.image_yscale = -1.5
            
            blade4 = instance_create(x, y , objBlisteringSwords)
            blade4.direction = 0
            blade4.speed = 24
            blade4.image_angle = 180
            blade4.image_xscale = -1.5
            blade4.image_yscale = -1.5
            
            blade5 = instance_create(x, y , objBlisteringSwords)
            blade5.direction = 45
            blade5.speed = 24
            blade5.image_angle = 225
            blade5.image_xscale = -1.5
            blade5.image_yscale = -1.5
            
            blade6 = instance_create(x, y , objBlisteringSwords)
            blade6.direction = 135
            blade6.speed = 24
            blade6.image_angle = 315
            blade6.image_xscale = -1.5
            blade6.image_yscale = -1.5
            
            blade7 = instance_create(x, y , objBlisteringSwords)
            blade7.direction = 225
            blade7.speed = 24
            blade7.image_angle = 45
            blade7.image_xscale = -1.5
            blade7.image_yscale = -1.5
            
            blade8 = instance_create(x, y , objBlisteringSwords)
            blade8.direction = 315
            blade8.speed = 24
            blade8.image_angle = 135
            blade8.image_xscale = -1.5
            blade8.image_yscale = -1.5
            
        }   
        global.charge_counter = 0
        charged = 0
    }
}

// THOMAS: heavy strikes.
if global.character = 1 {
    
    if mouse_check_button(mb_right) {
        global.charge_counter ++
        global.shake += 0.2
        if global.shake &gt; 10 global.shake = 10
    }
    
    if global.charge_counter &gt;= 30 and charged = 0 {
        charge = instance_create(x, y, objPsychicCharged)
        charge.image_xscale = 0.5
        charge.image_yscale = charge.image_xscale
        sound_ps(sndLeviathanCharged)
        charged = 1
    }
    
    if mouse_check_button_released(mb_right) {
        if global.charge_counter &gt; 30 {
        
            /*shock = instance_create(x, y, objPulseRipple)
            shock.image_xscale = 0.8
            shock.image_yscale = shock.image_xscale*/     
        
            // Dash if already moving.
            if state_name="Default" {
                if (abs(myxspeed)+abs(myyspeed)) != 0 {
                    sound_ps(sndDash)
                    state_switch("Dash")
                }
            }

            sound_ps(sndSwingFists)
            sprite_index = choose(thomasStrikeL1, thomasStrikeL2, thomasStrikeL3, thomasStrikeL4, thomasStrikeL4, thomasStrikeL4, thomasStrikeL4)
            image_speed = 0.33
            reload = 1
            global.shake = 15
            //sleep(50)
        }   
        
        global.charge_counter = 0
        charged = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ABILITY: Toggle fire-rate.
if keyboard_check_pressed(ord(global.switchkey)) {
    global.automatic=!global.automatic
    sound_ps(sndSwitchFiringMode)
    
    // Detonate C4.
    if instance_exists(objC4) {
        sound_ps(sndDetonateC4)
        sprite_index = sprPDetonateC4
        image_speed = 0.5
        with objC4 alarm[0] = 5
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ABILITY: Enter berserk mode.

/*if global.combo &gt;= 20 {
    
    if berserk = 0 {
        objEffector.brus = 6
        sound_ps(sndThunder)
        scrPlayerDropWeapon()
        sprite_index = sprPWalkLeviathan
        shock = instance_create(x, y, objPulseRipple)
        shock.image_xscale = 0.8
        shock.image_yscale = shock.image_xscale

        // Create swords.
        sound_ps(sndBlisteringSwords)

        blade1 = instance_create(x, y, objBlisteringSwords)
        blade1.direction = 90
        blade1.speed = 24
        blade1.image_angle = 270
        blade1.image_xscale = -1.5
        blade1.image_yscale = -1.5

        blade2 = instance_create(x, y, objBlisteringSwords)
        blade2.direction = 180
        blade2.speed = 24
        blade2.image_angle = 0
        blade2.image_xscale = -1.5
        blade2.image_yscale = -1.5

        blade3 = instance_create(x, y, objBlisteringSwords)
        blade3.direction = 270
        blade3.speed = 24
        blade3.image_angle = 90
        blade3.image_xscale = -1.5
        blade3.image_yscale = -1.5

        blade4 = instance_create(x, y, objBlisteringSwords)
        blade4.direction = 0
        blade4.speed = 24
        blade4.image_angle = 180
        blade4.image_xscale = -1.5
        blade4.image_yscale = -1.5

        blade5 = instance_create(x, y, objBlisteringSwords)
        blade5.direction = 45
        blade5.speed = 24
        blade5.image_angle = 225
        blade5.image_xscale = -1.5
        blade5.image_yscale = -1.5

        blade6 = instance_create(x, y, objBlisteringSwords)
        blade6.direction = 135
        blade6.speed = 24
        blade6.image_angle = 315
        blade6.image_xscale = -1.5
        blade6.image_yscale = -1.5

        blade7 = instance_create(x, y, objBlisteringSwords)
        blade7.direction = 225
        blade7.speed = 24
        blade7.image_angle = 45
        blade7.image_xscale = -1.5
        blade7.image_yscale = -1.5

        blade8 = instance_create(x, y, objBlisteringSwords)
        blade8.direction = 315
        blade8.speed = 24
        blade8.image_angle = 135
        blade8.image_xscale = -1.5
        blade8.image_yscale = -1.5

        berserk = 1
    }
} else berserk = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particle effects.

if sprite_index = sprPWalkBoilingPot {
    if round(random(5)) = 2 instance_create(x + lengthdir_x(11, dir - 33 * left), y + lengthdir_y(11, dir - 33 * left), objSteam)
    em_steam = part_emitter_create(boiling_steam)
    part_emitter_region(boiling_steam,em_steam,x + lengthdir_x(11, dir - 33 * left), x + lengthdir_x(11, dir - 33 * left), y + lengthdir_y(11, dir - 33 * left), y + lengthdir_y(11, dir - 33 * left), 0,0)
    part_emitter_burst(boiling_steam, em_steam, steam, 1)
}

/*if steps {
    steps_rate -= 1 
    if steps_rate &lt; 0 {
        steps_side = -steps_side
        footprint = instance_create(x + steps_side, y, objFootPrint)
        footprint.image_angle = walkdir
        steps_duration -= 1
        if steps_duration &lt; 0 steps = false
    }
}

if place_meeting(x, y, objBloodPool) {
    steps_count = steps_duration
    steps = true
}
/*if scrPlayerHasGun(sprite_index) and !scrIsReloading(sprite_index) and !scrIsFiring(sprite_index) {
    em = part_emitter_create(smoke_trail)
    part_emitter_region(smoke_trail,em,x + lengthdir_x(23, dir), x + lengthdir_x(23, dir), y + lengthdir_y(23, dir), y + lengthdir_y(23, dir), 0,0)
    part_emitter_burst(smoke_trail,em,pt,1)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Audio controls.
//audio_listener_position(x, y, 0)

// Flamethrower.
if scrCurrentWeaponExt(sprite_index) = 28 {
    if ammo &gt; 0 {
        if mouse_check_button(mb_left) {
            if played = 0 {
                sound_ps(sndFlamethrowerStart)
                played = 1
            }
            if !audio_is_playing(sndFlamethrower)
            audio_play_sound(sndFlamethrower, 1, true)
        } else {
            audio_stop_sound(sndFlamethrower)
            played = 0
        }
    } else {
        if audio_is_playing(sndFlamethrower) audio_stop_sound(sndFlamethrower)
    }
} else {
    if audio_is_playing(sndFlamethrower) audio_stop_sound(sndFlamethrower)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Kill player.

// God mode.
if global.tgm = 1 exit

switch (global.character) {

    case 0: // JOHN
        objEffector.scratch = 100
        create_thought_damaged(global.nigredo, global.albedo, 0.2, 50, 0)
        player_bullet_hit()
        break;

    case 1: // THOMAS
        break;

    case 2: // PIERRETTE
        if pierretteIsShielded(sprite_index) {
            if !scrCheckHitBack(dir, other.direction) {
            } else player_bullet_hit()
        } else player_bullet_hit()
        break;

    case 3: // SIMONE
        if sprite_index = simoneWalkShield or sprite_index = simoneAttackShield {
            if !scrCheckHitBack(dir, other.direction) {
                hp_shield -= other.damage
                scrBloodShot(x, y, 3)
                sound_ps(choose(sndBulletFlesh3, sndBulletFlesh2, sndBulletFlesh1))
                create_damage_projectile(random(3), global.albedo, 1, x + choose(-random(24), random(24)), y - 5)
                with other instance_destroy()

                // Destroy shield.
                if hp_shield &lt;= 0 {
                    scrMeleeBlood(x, y)
                    sound_ps(choose(sndCritical1, sndCritical2, sndCritical3))
                    body = instance_create(x, y, objDeadBody)
                    body.sprite_index = choose(sprEDeadMachinegun, sprEDeadShotgun)
                    if body.sprite_index = sprEDeadMachinegun body.image_index = choose(1, 3, 6)
                    else body.image_index = choose(0, 2, 4, 5, 10)
                    body.image_speed = 0
                    body.direction = dir
                    body.image_yscale = choose(1, -1)
                    body.image_xscale = 1
                    body.speed = 1
                    body.friction = 0.15
                    body.image_angle = body.direction

                    // Fully restore the player's health.
                    hp += max_hp
                    sound_ps(sndCollectHealth)
                    create_health_number(max_hp, 1)
                    global.screeneffect = 16

                    sprite_index = simoneWalk
                    hp_shield = 150
                }
            }
        } else player_bullet_hit()
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom out with scopes.
hp -= 10 // DEBUG

// Allow zoom only if the aim further key is being pressed.
if keyboard_check(vk_shift) {
    
    // 2x magnification for Intervention.
    if scrCurrentWeaponExt(sprite_index) = 29 {
        if global.scopeZoom &gt; 0 {
            global.scopeZoom -= 8
            sound_ps(sndSniperZoom)
            objEffector.blackalpha = 1
        } else global.scopeZoom = 0
    }
    
    // 3x magnification for WA2000.
    if scrCurrentWeaponExt(sprite_index) = 49 {
        if global.scopeZoom &gt; 0 {
            global.scopeZoom -= 4
            sound_ps(sndSniperZoom)
            objEffector.blackalpha = 1
        } else global.scopeZoom = 0
    }
}

view_zoom_type = "in"
view_zoom_step = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom in with scopes.
hp += 10 // DEBUG

// Allow zoom only if the aim further key is being pressed.
if keyboard_check(vk_shift) {
    
    // 4x magnification (once) for Intervention.
    if scrCurrentWeaponExt(sprite_index) = 29 {
        if global.scopeZoom &lt; 8 {
            global.scopeZoom += 8
            sound_ps(sndSniperZoom)
            objEffector.blackalpha = 1
        } else global.scopeZoom = 8     
    }
    
    // 6x (three times) magnification for WA2000.
    if scrCurrentWeaponExt(sprite_index) = 49 {
        if global.scopeZoom &lt; 12 {
            global.scopeZoom += 4
            sound_ps(sndSniperZoom)
            objEffector.blackalpha = 1
        } else global.scopeZoom = 12  
    }
}

view_zoom_type = "out"
view_zoom_step = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flamethrower.
if scrCurrentWeaponExt(sprite_index) = 28 and ammo &gt; 0 {
    sound_ps(sndFlamethrowerEnd)
}

if fire_delay &lt; 30 fire_delay = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="55">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ABILITIES 3.
if scrIsDisarming() exit //or scrIsReloading(sprite_index)
if sprite_index = sprPWalkDW or sprite_index = sprPReloadDW or sprite_index = sprPTurnDW exit
if global.active = 0 exit
if global.done = 1 exit

// Various actions.

// JOHN
if global.character = 0 scrPlayerPickUpWeapon()

// THOMAS
if global.character = 1 scrPlayerPickUpNonlethal()

// PIERRETTE
if global.character = 2 {
    if reload = 0 {
        if sprite_index = pierretteWalkSMG
            or sprite_index = pierretteWalkShotgun {
                //sprite_index = choose(pierretteAttackBaton1, pierretteAttackBaton2)
                sound_ps(sndSwingFists)
                sound_ps(sndSwing2)
                reload = 30
            }

        // Shield bash.
        if sprite_index = pierretteWalkShield {
            sprite_index = pierretteBashShield
            sound_ps(sndSwingHeavy2)
            global.shake = 10
            reload = 60
            /*if state_name = "Default" {
                if (abs(myxspeed) + abs(myyspeed)) != 0 {
                    state_switch("Dash")
                }
            }*/
        }

        image_index = 0
        image_speed = 0.4
    }
}

// SIMONE
if global.character = 3 {
    if reload = 0 and!(sprite_index = simoneWalkShield or sprite_index = simoneExecuteShield1 or sprite_index = simoneExecuteShield2) {
        sprite_index = simonePistolWhip
        image_index = 0
        image_speed = 0.4
        sound_ps(sndSwingFists)
        sound_ps(sndSwing2)
        reload = 30
    }

    // SIMONE: Execute shield.
    if sprite_index = simoneWalkShield {
        if ammo &gt; 0 sprite_index = choose(simoneExecuteShield1, simoneExecuteShield2)
        else sprite_index = simoneExecuteShieldSnap
        image_speed = 0
        image_index = 0
        if shield = 1 shield = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ABILITY : Blink behaviour.

// Teleportation.
if teleport = true {

    // Check to see if there are any walls at the new position.
    if scrPlaceFree(global.mousex, global.mousey) and !place_meeting(global.mousex, global.mousey, objEnemy) {
    
        if teleporting = false {
        
            // Save this new location and start teleportation sequence.
            xx = global.mousex
            yy = global.mousey
            teleporting = true
            teleport_fade = true
            sound_ps(sndTeleport)
            //my_id = instance_create(xx, yy, objPulseRipple)
            //my_id.depth = -1
            objEffector.blackalpha = 1
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Semi-automatic / melee weapons.

if scrIsDisarming() or reload &gt; 0 or teleport = true or global.done = 1 exit

// Melee weapons.
scrPlayerAttackMelee()

// Firearms.
if ammo &gt; 0 and !scrIsReloading(sprite_index) {
    scrPlayerShootSemi()
    scrPlayerCreateBurstFire()
    image_angle = 0
} 

// PIERRETTE: Ready up.
if sprite_index = pierretteWalkUnarmed and ready = 0 {
    sprite_index = pierretteReadyUp
    image_index = 0 
    image_speed = 0.2
    sound_ps(sndPickUpGeneric)
    sound_ps(sndRecharge)
    sound_ps(sndReadyUp)
    ready = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ABILITY : Leviathan attack behaviour.
if sprite_index = sprPWalkLeviathan {
    image_speed = 0.5
    reload = 1
    sound_ps(sndSwingHeavy2)
    sprite_index = sprPAttackLeviathan
     
    if round(random(10)) = 2 {
        my_id = instance_create(x + lengthdir_x(26, dir), y + lengthdir_y(26, dir), objPsychicSlashMassive) 
            if instance_exists(my_id) {
                sound_ps(sndLeviathanCharged)
                sound_ps(sndMassiveSlash)
                my_id.direction = dir
                my_id.image_angle = my_id.direction
                my_id.image_xscale = random_range(0.5, 0.7) 
                my_id.image_yscale = left
        }
    } else {
        slash = instance_create(x + lengthdir_x(80, dir), y + lengthdir_y(80, dir), objPsychicSlash) 
            if instance_exists(slash) {
                slash.direction = dir
                slash.image_xscale = -random_range(0.6, 1.2)
                slash.image_yscale = left
                slash.image_angle = slash.direction
        }
    }
    global.shake = 8
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// THOMAS: Attack.
if sprite_index = thomasWalk {
    sound_ps(sndSwingFists)
    sprite_index = choose(thomasStrikeR1, thomasStrikeR2, thomasStrikeR3, thomasStrikeR4)
    //image_index = 4
    image_speed = 0.5
    reload = 1
    global.shake = 5
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Automatic weapons.
if scrIsDisarming() or reload &gt; 0 or teleport = true exit
if global.active = 1 scrPlayerAttackAuto() 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End player animation.
scrPlayerAnimationEnd()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set persistence and adjust view.
if object_index = objPlayerDead exit
if alarm[0] &lt;= 0 alarm[0] = 10

if persistent = 1 {
    //view_xview[0] = xview
    //view_yview[0] = yview
    with objEffector {
        vlastx = view_xview[0]
        vlasty = view_yview[0]
    }
    persistent = 0
    alarm[0] = 6
} else {
    vdist = point_distance(x, y, room_width / 2, room_height / 2)
    vdir = point_direction(room_width / 2, room_height / 2, x, y)
    
    view_xview[0] = x + lengthdir_x(vdist * 0.2, vdir - 180) - view_wview[0] * 0.5
    view_yview[0] = y + lengthdir_y(vdist * 0.2, vdir - 180) - view_hview[0] * 0.5
    
    with objEffector {
        vlastx = view_xview[0]
        vlasty = view_yview[0]
    }
}

if instance_exists(objEnemy) clear = 0 else clear = 1

// Activate floor control.
alarm[1] = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw player.

if !instance_exists(objSunset) draw_sprite_ext(sprShadow, 0, x, y, 0.5, 0.5, 0, c_black, 1)

// Draw light.
if light&gt;0 light-=1
draw_set_blend_mode(bm_add)
draw_circle_color(x,y,32+random(6)+light,make_color_hsv(0,0,30),c_black,0)
draw_set_blend_mode(bm_normal)

// Draw healthbar.
//draw_health(c_white)

if sprite_index = simoneWalkShield or sprite_index = simoneAttackShield {
    draw_set_alpha(hp_alpha)
    draw_healthbar_circular(x ,y , 100, 100, global.nigredo, 18, 0.8, 4) // Back - static.
    draw_healthbar_circular(x ,y , hp_shield, max_shield, c_white, 18, 1, 4) // Actual health.
    draw_reset()
}

// Dash if already moving.
if state_name="Default"{
    draw_sprite_ext(legsprite, legindex, x + 1, y + 1, image_xscale, image_yscale, legdir, c_black, 0.4)
    draw_sprite_ext(sprite_index, image_index, x + 1, y + 1, image_xscale, left, dir, c_black, 0.4)
    
    draw_sprite_ext(legsprite, legindex, x, y, image_xscale, image_yscale, legdir, image_blend, image_alpha)
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, left, dir, image_blend, image_alpha)

} else if state_name="Dash" exit

// DEBUG: Draw bounding box.
//draw_set_alpha(0.75)
//draw_rectangle_colour(bbox_left,bbox_top,bbox_right,bbox_bottom,c_red,c_red,c_red,c_red,true)
//draw_set_alpha(1)

if aimon=1 dir=point_direction(x,y,global.mousex,global.mousey)

if light&gt;3 light-=3
if reload &gt; 0 reload -= 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Throwables.
if instance_exists(mnPhone) {
    if mnPhone.active = 1 mnPhone.active = 0
}
if global.done = 1 or global.active = 0 exit
global.current = sprite_index

if thrown = 0 {
    
    switch (global.character) {
        case 0: // JOHN
        scrPlayerThrow(sprPThrow, sndThrowFrag, objGrenade, 16)
        break;
        
        case 1: // THOMAS
        scrPlayerThrow(sprPThrow, sndThrow, objBouncyBall, 16)
        break;
        
        case 2: // PIERRETTE
        if sprite_index = pierretteWalkSMG or sprite_index = pierretteWalkShotgun
        scrPlayerThrow(pierretteThrow, sndThrow, objFlashbang, 10)
        else scrPlayerThrow(pierretteThrowShield, sndThrow, objFlashbang, 10)
        sound_ps(sndFlashbangPin)
        break;
        
        case 3: // SIMONE
        scrPlayerThrow(simoneThrow, sndThrow, objPetrolBomb, 16)
        sound_ps(sndLighter)
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index = pierretteWalkShield
or sprite_index = pierretteAttackShield
//or sprite_index = pierretteReloadShield 
or sprite_index = pierretteBashShield {
    sprite_index = pierrettePlantShield
    image_speed = 0.4
    image_index = 0
    sound_ps(sndPickUpGeneric)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ABILITIES 3.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute enemies / dash. 
if scrIsDisarming() or reload &gt; 0 or global.active = 0 exit

// Execute enemies.
scrPlayerExecute()

// Dash if already moving.
if global.character = 0 // John
or global.character = 1 // Thomas
{
    if state_name="Default" {
        if (abs(myxspeed)+abs(myyspeed)) != 0 {
        
            // Leviathan creates flurry slash.
            //if scrCurrentWeaponExt(sprite_index) = 80 instance_create(x, y, objFlurrySlash)
            sound_ps(sndDash)
            state_switch("Dash")
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
