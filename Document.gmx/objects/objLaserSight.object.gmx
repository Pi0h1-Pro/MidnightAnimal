<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>priTarget = ds_priority_create();
if instance_exists(objPlayer) {
    fxBeam = beam_create(2, objPlayer.x, objPlayer.y, objPlayer.x, objPlayer.y);
    fxBeamHot = beam_create(1, objPlayer.x, objPlayer.y, objPlayer.x, objPlayer.y);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(objPlayer) {
    image_angle = point_direction(objPlayer.x, objPlayer.y, global.mousex, global.mousey);

    ds_priority_clear(priTarget);

    //Initialise solids.
    do {
        varTarget = collision_line(objPlayer.x, objPlayer.y, x, y, objSolid, false, true);
        if (varTarget &gt; 0) {
            ds_priority_add(priTarget, varTarget, point_distance(objPlayer.x, objPlayer.y, varTarget.x, varTarget.y));
            instance_deactivate_object(varTarget);
        }
    }
    
    until(varTarget &lt;= 0)
    
    //Initialise solids.
    do {
        varTarget = collision_line(objPlayer.x, objPlayer.y, x, y, objSolidCaster, false, true);
        if (varTarget &gt; 0) {
            ds_priority_add(priTarget, varTarget, point_distance(objPlayer.x, objPlayer.y, varTarget.x, varTarget.y));
            instance_deactivate_object(varTarget);
        }
    }

    until(varTarget &lt;= 0)

    //Initialise walls.
    do {
        varTarget = collision_line(objPlayer.x, objPlayer.y, x, y, objWall, false, true);
        if (varTarget &gt; 0) {
            ds_priority_add(priTarget, varTarget, point_distance(objPlayer.x, objPlayer.y, varTarget.x, varTarget.y));
            instance_deactivate_object(varTarget);
        }
    }

    until(varTarget &lt;= 0)
    
    //Initialise enemies.
    do {
        varTarget = collision_line(objPlayer.x, objPlayer.y, x, y, objEnemy, false, true);
        if (varTarget &gt; 0) {
            ds_priority_add(priTarget, varTarget, point_distance(objPlayer.x, objPlayer.y, varTarget.x, varTarget.y));
            instance_deactivate_object(varTarget);
        }
    }
    until(varTarget &lt;= 0)

    //Initialise misc enemies.
    do {
        varTarget = collision_line(objPlayer.x, objPlayer.y, x, y, objMiscEnemy, false, true);
        if (varTarget &gt; 0) {
            ds_priority_add(priTarget, varTarget, point_distance(objPlayer.x, objPlayer.y, varTarget.x, varTarget.y));
            instance_deactivate_object(varTarget);
        }
    }
    until(varTarget &lt;= 0)

    //Initialise doors.
    do {
        varTarget = collision_line(objPlayer.x, objPlayer.y, x, y, objDoorV, false, true);
        if (varTarget &gt; 0) {
            ds_priority_add(priTarget, varTarget, point_distance(objPlayer.x, objPlayer.y, varTarget.x, varTarget.y));
            instance_deactivate_object(varTarget);
        }
    }
    until(varTarget &lt;= 0)
    
    instance_activate_all();

    if (ds_priority_size(priTarget) &gt; 0) {
        varTarget = ds_priority_find_min(priTarget);
        varScale = ds_priority_find_priority(priTarget, varTarget);
    } else {
        varScale = sqrt(room_width * room_width + room_height * room_height);
    }
    x = objPlayer.x + objPlayer.hspeed + lengthdir_x(varScale, image_angle);
    y = objPlayer.y + objPlayer.vspeed + lengthdir_y(varScale, image_angle);

    beam_update(fxBeam, objPlayer.x + objPlayer.hspeed, objPlayer.y + objPlayer.vspeed, x, y);
    beam_update(fxBeamHot, objPlayer.x + objPlayer.hspeed, objPlayer.y + objPlayer.vspeed, x, y);
} //else beam_destroy()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(objPlayer) {
        draw_set_blend_mode(bm_add);
            draw_set_alpha(.5);
                draw_circle_color(x, y, 20, c_red, c_black, false);
                draw_circle_color(objPlayer.x, objPlayer.y, 40, c_red, c_black, false);
            draw_set_alpha(1);  
            draw_circle_color(x, y, 3, c_white, c_black, false);
            //draw_circle_color(objPlayer.x, objPlayer.y, 20, c_white, c_black, false);
            
            d3d_transform_set_identity();
                d3d_transform_add_scaling(varScale, 1, 1);
                d3d_transform_add_rotation_z(image_angle);
                d3d_transform_add_translation(objPlayer.x, objPlayer.y, 0);
                draw_primitive_begin(pr_trianglefan);
                    draw_vertex_color(0, 0, c_red, 1);
                    draw_vertex_color(.01, -4, c_black, 1);
                    draw_vertex_color(.99, -4, c_black, 1);
                    draw_vertex_color(1, 0, c_red, 1);
                    draw_vertex_color(.99, 4, c_black, 1);
                    draw_vertex_color(.01, 4, c_black, 1);
                draw_primitive_end();
                draw_primitive_begin(pr_trianglefan);
                    draw_vertex_color(0, 0, c_red, .25);
                    draw_vertex_color(.01, -6, c_black, .25);
                    draw_vertex_color(.99, -6, c_black, .25);
                    draw_vertex_color(1, 0, c_red, .25);
                    draw_vertex_color(.99, 6, c_black, .25);
                    draw_vertex_color(.01, 6, c_black, .25);
                draw_primitive_end();
                draw_line_color(0, 0, 1, 0, c_white, c_black);
            d3d_transform_set_identity();
            beam_draw(fxBeam, c_red, c_red, 1, 0);
            beam_draw(fxBeamHot, c_gray, c_gray, 1, 1);
        draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
