<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create console.

/*****************************
* This creates the console
* system and stores it in a
* variable.
*****************************/
my_console = console_create();

/*****************************
* This allows you to override
* the default settings for the
* console system.
*****************************/
console_settings(my_console," ",false);

/*****************************
* This loads some preset commands
* into the console system.
*****************************/
console_preset(my_console);

/*****************************
* This loads all the available
* commands from a text file,
* which will be shown as suggestions
* whilst the user types.
*****************************/
//console_text_open(my_console,"commands.txt");

/*****************************
* You can also add individual
* commands to the suggestions
* list.
*****************************/
console_add(my_console,"showinfo (bool) - Toggle metainformation.");
console_add(my_console,"weapon (id) - Spawn weapon.");
console_add(my_console,"kill - Kill all enemies.");
console_add(my_console,"setammo (int ammo) - Set current ammo.");
console_add(my_console,"tgm (bool) - Toggle god mode.");
console_add(my_console,"hud (bool) - Toggle HUD.");
console_add(my_console,"gibfest (bool) - Toggle gibfest: chunks galore!");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy console.

/*****************************
* Remember to destroy console
* system when no longer needed,
* to free up memory.
*****************************/
console_destroy(my_console);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Console commands.

/*****************************
 * If a command has been submitted...
 *****************************/
if console_submit(my_console) {

    /*****************************
     * Here we can put all our commands.
     *****************************/

    // COMMAND: kill - kills all enemies.
    if console_cmd(my_console, "kill") with objEnemy instance_destroy()

    // COMMAND: setammo - set ammo to value.
    if console_cmd(my_console, "setammo") {
        if console_value_count(my_console) = 1 {
            give_ammo = console_value(my_console, 1)

            if is_real(give_ammo) objPlayer.ammo = give_ammo
        }
    }
    
    // COMMAND: weapon - create weapon.
    if console_cmd(my_console, "weapon") {
        if console_value_count(my_console) = 1 {
            index = console_value(my_console, 1);

            if is_real(index) {
                weapon = instance_create(global.mousex, global.mousey, objWeaponSpawn)
                weapon.image_index = index
                weapon.ammo = scrGetSpecificAmmo(index)
            }
        }
    }

    // COMMAND: showinfo - display information
    if console_cmd(my_console, "showinfo") {
        if console_value_count(my_console) = 1 {
            index = console_value(my_console, 1);

            objEffector.showinfo = index
        }
    }
    
    // COMMAND: tgm - toggle god mode.
    if console_cmd(my_console, "tgm") {
        if console_value_count(my_console) = 1 {
            index = console_value(my_console, 1);

            global.tgm = index
        }
    }
    
    // COMMAND: hud - toggle HUD.
    if console_cmd(my_console, "hud") {
        if console_value_count(my_console) = 1 {
            index = console_value(my_console, 1);

            global.hud = index
        }
    }
    
    // COMMAND: gibfest - toggle gibfest.
    if console_cmd(my_console, "gibfest") {
        if console_value_count(my_console) = 1 {
            index = console_value(my_console, 1);

            global.gibfest = index
        }
    }
    
    // COMMAND: rainbow - toggle rainbow mode.
    if console_cmd(my_console, "rainbow") {
        if console_value_count(my_console) = 1 {
            index = console_value(my_console, 1);

            global.rainbow = index
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw console.
/***************************
* This draws the console on
* the screen once it has been
* activated.
***************************/

draw_set_font(fntTiny);
console_draw(my_console,200,c_black,c_black,c_white,c_white,0.75);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle console.
/*****************************
* This will toggle the console
* visibility.
*****************************/
console_toggle(my_console);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
