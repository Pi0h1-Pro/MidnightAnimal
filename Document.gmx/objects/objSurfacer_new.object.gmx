<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf=surface_create(room_width*2,room_height*2)
surface_set_target(surf)
draw_clear_alpha(c_black,0)
surface_reset_target()
coldir=0
global.loaded=0

floorsurf = surface_create(room_width*2,room_height*2)
surface_set_target(floorsurf)
draw_clear_alpha(c_black,0)
surface_reset_target()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(surf)
surface_free(floorsurf)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//surface_free(tilesurf)
scrSurfaceTiles()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = random(360)
repeat(4) {
    my_id = instance_create(mouse_x, mouse_y, objSplat)
    my_id.direction = dir - 45 + random(90)
    my_id.speed = 2 + random(2)
}
repeat(9) {
    my_id = instance_create(mouse_x, mouse_y, objSmudge)
    my_id.direction = dir - 45 + random(90)
    my_id.speed = 3 + random(3)
    my_id.image_angle = my_id.direction
}
repeat(3) {
    my_id = instance_create(mouse_x - 12 + random(24), mouse_y - 12 + random(24), objBigBlood)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.factor = 1

if !surface_exists(surf) {
    surf = surface_create(room_width * 2, room_height * 2)
    surface_set_target(surf)
    draw_clear_alpha(c_black, 0)
    surface_reset_target()
}

if !surface_exists(tilesurf) or global.loaded = 1 {
    if global.loaded = 1 alarm[1] = 5
    scrRestartMusic() 
    global.loaded = 0
    scrSurfaceTiles()
}

surface_set_target(floorsurf)

with objFloor {
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha) instance_destroy()
}
surface_reset_target()

surface_set_target(surf)
with objTinyBlood draw_sprite_ext(sprite_index, image_index, x * 2 - 2 + random(4), y * 2 - 2 + random(4), image_xscale * 2, image_yscale * 2, image_angle, c_fuchsia, image_alpha)
with objWater {
    draw_sprite_ext(sprite_index, image_index, x * 2 - 2 + random(4), y * 2 - 2 + random(4), image_xscale * 2, image_yscale * 2, image_angle, c_white, image_alpha)
}
with objWater {
    instance_destroy()
}

with objSplat {
    if objSplat.done = 1 draw_sprite_ext(sprite_index, image_index, x * 2 - 2 + random(4), y * 2 - 2 + random(4), image_xscale * 2, image_yscale * 2, image_angle, c_fuchsia, image_alpha)
}

with objSplat {
    if objSplat.done = 1 draw_sprite_ext(scrRed(sprite_index), image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, c_fuchsia, image_alpha)
}

with objSplat {
    if objSplat.done = 1 instance_destroy()
}

with objSmudge {
    if objSmudge.done = 1 draw_sprite_ext(sprite_index, image_index, x * 2 - 2 + random(4), y * 2 - 2 + random(4), image_xscale * 2, image_yscale * 2, image_angle, c_fuchsia, image_alpha)
}

with objSmudge {
    if objSmudge.done = 1 draw_sprite_ext(scrRed(sprite_index), image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, c_fuchsia, image_alpha)
}

with objSmudge {
    if objSmudge.done = 1 instance_destroy()
}

with objBigBlood {
    if objBigBlood.done = 1 draw_sprite_ext(sprite_index, image_index, x * 2 - 2 + random(4), y * 2 - 2 + random(4), image_xscale * 2, image_yscale * 2, image_angle, c_fuchsia, image_alpha)
}

with objBigBlood {
    if objBigBlood.done = 1 draw_sprite_ext(scrRed(sprite_index), image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, c_fuchsia, image_alpha)
}

with objBigBlood {
    if objBigBlood.done = 1 instance_destroy()
}

with objSplatter {
    draw_sprite_ext(sprite_index, image_index, x * 2 - 2 + random(4), y * 2 - 2 + random(4), image_xscale, image_yscale, image_angle, c_fuchsia, image_alpha) instance_destroy()
}

with objTinyBlood {
    draw_sprite_ext(sprite_index, image_index, x * 2 - 2 + random(4), y * 2 - 2 + random(4), image_xscale, image_yscale, image_angle, c_fuchsia, image_alpha) instance_destroy()
}

with objSurfaceReturn {
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha) sprite_delete(sprite_index) visible = 0 instance_destroy()
}

with objBodies {
    draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
}

with objComputerParts {
    if speed = 0 {
        draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
    }
}
with objShard {
    if speed = 0 {
        draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
    }
}
with objTVShards {
    if speed = 0 {
        draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
    }
}
with objPlasticShard {
    if speed = 0 {
        if wait &gt; 0 wait -= 1
        else {
            draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
        }
    }
}
with objTVBigParts {
    if speed = 0 {
        draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
    }
}
with objComputerPartsBig {
    if speed = 0 {
        draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
    }
}
with objComputerParts {
    if speed = 0 {
        draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
    }
}
with objShell {
    if speed = 0 {
        draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
    }
}
with objWoodDebris {
    if speed = 0 {
        draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
    }
}
with objBrains {
    if speed = 0 {
        if wait &gt; 0 wait -= 1
        else {
            draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
        }
    }
}
with objIntestine {
    if speed = 0 {
        if wait &gt; 0 wait -= 1
        else {
            draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
        }
    }
}
with objFleshChunk {
    if speed = 0 {
        if wait &gt; 0 wait -= 1
        else {
            draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
        }
    }
}
with objHeadPiece {
    if speed = 0 {
        if wait &gt; 0 wait -= 1
        else {
            draw_sprite_ext(sprite_index, image_index, x * 2, y * 2, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha) instance_destroy()
        }
    }
}

surface_reset_target()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(surf)
surface_free(tilesurf)
surface_free(floorsurf)
surf=-1234
tilesurf=-1234
floorsurf=-1234
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSurfaceTiles()
//if instance_exists(objLSD) alarm[1]=5

/*if global.resetstory {
    draw_clear(c_black)
    screen_refresh()
    room_persistent = 0
    if ds_list_size(global.roomlist) &gt; 0 {
        myroom = ds_list_find_value(global.roomlist, 0) ds_list_delete(global.roomlist, 0) room_goto(myroom)
    } else {
        global.level = global.afterreset global.resetstory = 0 room = rmChapter
    }
    exit
}

if surface_exists(global.surf3) surface_free(global.surf3)
global.surf3 = surface_create(room_width * 3, room_height * 3)
if global.surfaces = 1 scrSurfaceTiles()

if global.surfaces = 1 {
    if instance_exists(objSurfaceReturn) {
        if surface_exists(global.surf3) {
            surface_set_target(global.surf3)
            draw_clear_alpha(make_color_hsv(0, 0, 2), 0)
            with objSurfaceReturn {
                draw_sprite(sprite_index, image_index, x, y) sprite_delete(sprite_index) instance_destroy()
            }
            surface_alpha()
            surface_reset_target()
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white)
//draw_surface_ext(surf,0.5,0.5,0.5,0.5,0,merge_color(c_maroon,c_white,0.5+lengthdir_x(0.5,coldir)),1)
if surface_exists(tilesurf) draw_surface_ext(tilesurf,0,0,1,1,0,c_white,1)
if surface_exists(surf) draw_surface_ext(surf,0,0,0.5,0.5,0,c_white,1) else surf = surface_create(room_width*2,room_height*2)
if surface_exists(floorsurf)
    draw_surface(floorsurf, 0, 0);
// Create new surface if DX destroys old surface due to port resize
else
    floorsurf = surface_create(room_width*2, room_height*2);
    
coldir+=4

//with objBlood draw_sprite_ext(scrRed(sprite_index),image_index,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha)
with objSplatter draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha)
with objBigBlood draw_sprite_ext(scrRed(sprite_index),image_index,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha)
with objSmudge draw_sprite_ext(scrRed(sprite_index),image_index,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha)
with objSplat draw_sprite_ext(scrRed(sprite_index),image_index,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha)
with objBloodPool draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>exit if keyboard_check(vk_shift) scrExportRoom()</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
