<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.surf1 = surface_create(room_width, room_height)
surface_set_target(global.surf1)
draw_clear_alpha(c_black, 0)
surface_reset_target()

myx = 0
rotation = 0
textx = 0
texty = 0
wait = 30
current = 0
//alarm[0] = 300
creditx = 320
credity = 18
alpha = 0
on = 1
amount = 0
factor = 0
dir = random(360)
fade = 0
c_amount = 0
colordir = 0
i = 0
flash = 1
sunalpha = 0
sunshine = 0
float = 0
horizon = 0
drawgrade=0
parscore = "/5000"
//dir = 180
dir2 = 0
cdir = 0
gradex = -10
gradeon = 0
alpha = 0
housex = 0
finalx = 500
alarm[2] = 1 + random(100)

//Create mist.
instance_create(x, y, objCloud)

//Draw stars.
repeat(72) {
    starx[i] = random(room_width)
    stary[i] = random(room_height / 2)
    starsize[i] = random(2) * random(1)
    starintensity[i] = random(1)
    i += 1
}



if global.barehanded = 1 SteamSetAchievement("ACH_THESE_ARE_MY_GUNS")
scrSaveAchievements()
scrCheckGuns()
if global.xbox = 1 scrInitXboxButtons()
scrCountFlexibilityScore()
scrCountMobilityScore()
scrCheckLetters()
scrCheckUsedGuns()
scrCheckUsedMasks()
scrCheckUsedThrows()
scrCheckUsedKills()
SteamCheckFinal()
song = working_directory + "\Daisuke.mp3"

global.myscore = 0
bonus[0] = global.killscore
if global.barehanded = 1 {
    audacity = global.boldscore * 2
    } else audacity = global.boldscore
bonus[1] = audacity
bonus[2] = global.comboscore
bonus[3] = floor((18000 - global.time) * 0.5)
if bonus[3] &lt; 0 bonus[3] = 0
bonus[4] = global.flexibilityscore
bonus[5] = global.mobilityscore
bonus[6] = global.specialscore
i = 0
fastforward = 0

repeat(6) {
    drawbonus[i] = 0
    temp[i] = 0
    global.myscore += bonus[i]
    i += 1
}

//SCORES
global.levelscore[global.currentlevel] = global.myscore
parscore = "/" + string(round((scrGetMaxpoints() * (7 / 15)) * (1 / 500)) * 500)


category[0] = "LETHALITY:"
category[1] = "AUDACITY:"
category[2] = "FLUIDITY:"
category[3] = "EFFICIENCY:"
category[4] = "FLEXIBILITY:"
category[5] = "MOBILITY:"
category[6] = "SPECIAL:"
global.totalscore += global.myscore

//UNLOCK WEAPONS
global.newguns = 0
allguns = 0
i = 0

while global.newgun[i] = 1 and i &lt; 15 {
    i += 1
}
if global.totalscore &gt; (i + 1) * 50000 and global.totalscore - global.myscore &lt; (i + 1) * 50000 global.newguns = 1
i += 1
if global.totalscore &gt; (i + 1) * 50000 and global.totalscore - global.myscore &lt; (i + 1) * 50000 global.newguns = 2
else i -= 1
nextgun = (i + 1) * 50000
leftgun = global.totalscore

i = 0
while global.newgun[i] = 1 and i &lt; 16 {
    i += 1
}
if i = 15 and global.newguns = 2 global.newguns = 1
if i = 16 {
    allguns = 1 global.newguns = 0
}

global.currentmask = 0
if global.sequence = rmSequence1 global.currentmask = 1
if global.sequence = rmSequence2 global.currentmask = 2
if global.sequence = rmSequence3 global.currentmask = 3
if global.sequence = rmSequence4 global.currentmask = 4
if global.sequence = rmSequence5 global.currentmask = 5
if global.sequence = rmSequence6 global.currentmask = 6
if global.sequence = rmSequence7 global.currentmask = 7
if global.sequence = rmSequence8 global.currentmask = 8
if global.sequence = rmSequence9 global.currentmask = 9
if global.sequence = rmSequence10 global.currentmask = 10
if global.sequence = rmSequence11 global.currentmask = 11
if global.sequence = rmSequence12 global.currentmask = 12
if global.sequence = rmSequence13 global.currentmask = 13
if global.sequence = rmSequence14 global.currentmask = 14
if global.sequence = rmMCBar global.currentmask = 15
if global.sequence = rmMCSequence2 global.currentmask = 16
if global.sequence = rmMCSequence3 global.currentmask = 17



/*-Combos = Combo Bonus
-Total time = Time Bonus
-Weapons used = Flexibility Bonus
-Distance between kills = Mobility Bonus
-Only melee bonus = Melee Bonus
-Shots fired during combat = Artillery Bonus
-People who see you kill someone = Boldness Bonus*/

if global.xbox = 1 scrInitXboxButtons()
//if surface_exists(global.surf1) surface_free(global.surf1)
//global.surf1 = surface_create(480, 256)
bonuses = ""

repeat ds_list_size(global.bonuslist) {
    bonuses += ds_list_find_value(global.bonuslist, i) + "#"
    i += 1
}

level = global.title
time = global.time
timer = global.timer
myscore = global.myscore

type = "MASS MURDERER"
maxpoints = scrGetMaxpoints()
skillpoints = global.myscore

grade = "F"
if skillpoints &lt; maxpoints * (1 / 16) grade = "F-"
if skillpoints &gt; maxpoints * (2 / 16) grade = "F"
if skillpoints &gt; maxpoints * (3 / 16) grade = "F+"
if skillpoints &gt; maxpoints * (4 / 16) grade = "D-"
if skillpoints &gt; maxpoints * (5 / 16) grade = "D"
if skillpoints &gt; maxpoints * (6 / 16) grade = "D+"
if skillpoints &gt; maxpoints * (7 / 16) grade = "C-"
if skillpoints &gt; maxpoints * (8 / 16) grade = "C"
if skillpoints &gt; maxpoints * (9 / 16) grade = "C+"
if skillpoints &gt; maxpoints * (10 / 16) grade = "B-"
if skillpoints &gt; maxpoints * (11 / 16) grade = "B"
if skillpoints &gt; maxpoints * (12 / 16) grade = "B+"
if skillpoints &gt; maxpoints * (13 / 16) grade = "A-"
if skillpoints &gt; maxpoints * (14 / 16) grade = "A"
if skillpoints &gt; maxpoints * (15 / 16) grade = "A+"
if skillpoints &gt; maxpoints * (16 / 16) grade = "S"


global.currentlevel = scrGetCurrentLevel()
lastgrade = grade

if global.grade[global.currentlevel - 1] &lt; scrGradeToNumber(grade) global.grade[global.currentlevel - 1] = scrGradeToNumber(grade)
if global.myscore &gt; global.highscore[global.currentlevel - 1] global.highscore[global.currentlevel - 1] = global.myscore
highscore = global.highscore[global.currentlevel - 1]
global.lastgrade = scrGradeToNumber(grade)


if string_count("exposure", string_lower(bonuses)) &gt; 6 type = "EXHIBITIONIST"
if string_count("pressure", string_lower(bonuses)) &gt; 3 type = "IMPROVISER"
if string_count("sharp", string_lower(bonuses)) &gt; 2 type = "MARKSMAN"
if string_count("combo", string_lower(bonuses)) &gt; 5 type = "SPREE KILLER"
if string_count("sneaky", string_lower(bonuses)) &gt; 1 type = "ASSASSIN"
if string_count("projectile", string_lower(bonuses)) &gt; 1 type = "PITCHER"
if string_count("door", string_lower(bonuses)) &gt; 4 type = "DOOR MAN"
if string_count("mercy", string_lower(bonuses)) &gt; 2 type = "PACIFIST"
if string_count("7x", string_lower(bonuses)) &gt; 0 or string_count("6x", string_lower(bonuses)) &gt; 0 or string_count("5x", string_lower(bonuses)) &gt; 0 or string_count("4x", string_lower(bonuses)) &gt; 0 type = "HITMAN"
if string_count("10x", string_lower(bonuses)) &gt; 0 or string_count("8x", string_lower(bonuses)) &gt; 0 or string_count("9x", string_lower(bonuses)) &gt; 0 or string_count("11x", string_lower(bonuses)) &gt; 0 type = "SPECIALIST"
if string_count("12x", string_lower(bonuses)) &gt; 0 or string_count("13x", string_lower(bonuses)) &gt; 0 or string_count("14x", string_lower(bonuses)) &gt; 0 or string_count("15x", string_lower(bonuses)) &gt; 0 type = "PROFESSIONAL"
if string_count("execution", string_lower(bonuses)) &gt; 4 type = "EXECUTIONER"
if string_count("execution", string_lower(bonuses)) &gt; 10 type = "SADIST"
if string_count("sharp", string_lower(bonuses)) &gt; 6 type = "PACIFIST"
if string_count("exposure", string_lower(bonuses)) = 0 type = "GHOST"

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    shinex = random(room_width)
    shiney = random(room_height / 2)
    star = instance_create(shinex, shiney, objStar)
    star.image_alpha = choose(0.3, 0.5, 0.7, 0.9)
    star.image_xscale = 0.5 + random(2)
    star.image_yscale = image_xscale
    alarm[2]=1+random(100)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fastforward = mouse_check_button(mb_left)
SteamRunCallbacks()

//Create global.surf1.
if !surface_exists(global.surf1) {
    global.surf1 = surface_create(room_width, room_height)
    surface_set_target(global.surf1)
    draw_clear_alpha(c_black, 0)
    surface_reset_target()
}

surface_set_target(global.surf1)
draw_clear_alpha(c_black, 0)

//Draw scene name and time.
draw_set_font(fntDetails)
draw_set_halign(fa_left)
draw_set_valign(fa_center)
    //draw_set_color(merge_color(c_white, c_dkgray, 0.5 + lengthdir_x(0.5, dir2 * 10)))
    //draw_text(11, 22, "SCENE: " + '"' + level + '"' + "#TIME: " + string(floor(time / 60)) + "s")
draw_set_color(c_white)
draw_text(12, 22, "SCENE: " + '"' + level + '"' + "#TIME: " + string(floor(time / 60)) + "s")

//Draw highscore and current score.
draw_set_halign(fa_right)
    //draw_set_color(merge_color(c_white, c_dkgray, 0.5 + lengthdir_x(0.5, dir2 * 10)))
    //draw_text(463, 22, "HIGHSCORE: " + string(highscore) + "#SCORE: " + string(myscore))
draw_set_color(c_white)
draw_text(462, 22, "HIGHSCORE: " + string(highscore) + "#SCORE: " + string(myscore))

//Draw score text.
draw_set_font(fntPointShow)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
i = 0

repeat(6) {

    //Set x position of score text.
    start_x = 20 + string_width(category[i]) * 0.5

    if i &lt; current + 1 {
        ii = 0
        repeat(1 + abs(lengthdir_y(15, temp[i]))) {
            draw_set_color(merge_color(merge_color(c_orange, c_fuchsia, 0.5 - lengthdir_y(0.5, dir * 8 + i * 25)), merge_color(c_silver, c_yellow, 0.25 - lengthdir_y(0.25, dir * 12 + i * 25)), 0.5 - lengthdir_x(0.5, ii * (180 / 16))))
            dist = ((64 + i * 16) - (room_height / 2)) * 0.25

            //Draw score text.
            draw_text_transformed(start_x, 64 + i * 16 - lengthdir_y(dist, 45 - lengthdir_x(45, ii * (180 / 16))), category[i], 1 + abs(lengthdir_y(0.25, 45 - lengthdir_x(45, ii * (180 / 16)))), 1 + abs(lengthdir_y(1, 45 - lengthdir_x(45, ii * (180 / 16)))), 0)
            ii += 1
        }

        //Allow fastforward of scores.
        if temp[i] &lt; 180 temp[i] += 4 + fastforward * 6
        else {
            if fastforward drawbonus[i] = bonus[i]
            if drawbonus[i] &lt; bonus[i] - 200 drawbonus[i] += 100
            else {
                if drawbonus[i] &lt; bonus[i] - 100 drawbonus[i] += 10
                else {
                    if drawbonus[i] &lt; bonus[i] - 5 drawbonus[i] += 5
                    else drawbonus[i] = bonus[i]
                }
            }

            //Draw numerical scores.
            draw_set_halign(fa_right)
            draw_set_color(merge_color(c_red, c_black, 0.35 + lengthdir_x(0.35, dir * 24)))
            draw_text_transformed(444, 64 + i * 16, string(drawbonus[i]), 1, 1, 0)
            draw_set_color(merge_color(c_aqua, c_teal, 0.35 + lengthdir_x(0.35, dir * 24)))
            draw_text_transformed(442, 64 + i * 16, string(drawbonus[i]), 1, 1, 0)
            draw_set_color(c_white)
            draw_text_transformed(440, 64 + i * 16, string(drawbonus[i]), 1, 1, 0)
            draw_set_halign(fa_center)
            if current = i and drawbonus[i] = bonus[i] current += 1
        }
    }
    i += 1
}

if drawbonus[5] = bonus[5] {

    if factor &lt; 1 factor += 0.025
    if gradex &lt; 390 {
        if finalx &gt; 400
        finalx -= 10

        gradex += 40

    } else {
        if gradeon = 0 {
            sound_play(sndCriticalKnifeAC)
            sound_play(sndCriticalKnifeSkyrim)
            gradeon = 1
            alpha = 1
            if grade = "S"
            SteamSetAchievement("ACH_ACED_IT") scrCheckGrades() 
        }
    }

    //Draw grade.
    draw_set_halign(fa_center)
    draw_set_font(fntGrading)
    mystring = "GRADE:"

    //Shadow.
    draw_set_color(merge_color(c_maroon, c_red, amount))
    draw_text_transformed(gradex - string_width(mystring) * 0.5 + 1, 216, mystring, 1, 1, 0)

    //Text.
    draw_set_color(merge_color(c_white, c_silver, amount))
    draw_text_transformed(gradex - string_width(mystring) * 0.5, 215, mystring, 1, 1, 0)

    draw_set_font(fntGrade)
    amount = -1 + lengthdir_x(2, cdir)
    if amount &lt; 0 amount = 0

    //Set colours of S rank and normal rank.
    if grade = "S" {
        draw_set_color(merge_color(c_yellow, c_white, amount))
    } else
        draw_set_color(merge_color(c_red, c_maroon, amount))

    draw_set_halign(fa_left)

    //Draw final grade.
    draw_text_transformed(finalx, 220, grade, 0.95 + amount * 0.05, 0.9 + amount * 0.1, 0)
}

if gradeon = 1 {

    //Draw playstyle.
    draw_set_font(fntDetails)
    draw_set_valign(fa_center)
    draw_set_halign(fa_center)
        //draw_set_color(merge_color(c_red, c_maroon, 0.5 + lengthdir_x(0.5, dir2 * 10)))
        //draw_text(240, 22, "PLAY STYLE:#" + '"' + type + '"')
    draw_set_color(merge_color(c_white, c_white, 0.5 + lengthdir_x(0.5, dir2 * 10 + 180)))
    draw_text(239, 22, "PLAY STYLE:#" + '"' + type + '"')

    draw_set_halign(fa_left)
    rotate = 0
    times = lengthdir_x(11, dir * 15)
    if times &lt; 1 times = 1

    //Draw final score.

    //If the score is lower than the expected score, make the score red to indicate failure.
    if global.myscore &lt; real(string_digits(parscore)) c = merge_color(c_red, c_fuchsia, 0.5 + lengthdir_x(0.5, dir))

    //Otherwise, set the score to a pinkish orange tint.
    else c = merge_color(merge_color(c_white, c_teal, 0.5 + lengthdir_x(0.5, dir)), c_fuchsia, 0.2 + lengthdir_x(0.2, dir))

    //Draw the score text.
    repeat(times) {
        draw_set_font(fntLevelScore)
        draw_set_color(merge_color(c_orange, c_yellow, 0.5 - lengthdir_x(0.5, i * 16)))
        draw_text_transformed(20, 213, "LEVEL SCORE", 1, 1, image_angle)

        draw_set_font(fntScoreStats)
        draw_set_color(merge_color(c_yellow, c_white, 0.5 - lengthdir_x(0.5, i * 16)))
        draw_text_transformed(20, 228, string(global.myscore) + parscore, 1, 1, image_angle) //lengthdir_x(2, dir * 2))
        i += 1
    }
}

surface_reset_target()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if factor &lt; 1 exit 
fade = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rotation += 4

if sunalpha &gt;= 1 {
    if sunshine &lt; 1 sunshine += 0.05
}
if sunalpha &lt; 1 sunalpha += 0.01

if float &gt;= room_width {
    if horizon &lt; 1 horizon += 0.05
}
if float &lt; room_width float += 0.05

//Draws the background of the room, which is the black-reddish sky.
draw_rectangle_color(-50, -50, room_width + 50, room_height + 50, merge_color(c_black, c_black, 0.15 + lengthdir_x(0.15, colordir * 0.25)), merge_color(c_black, c_black, 0.15 + lengthdir_x(0.15, colordir * 0.25 + 45)), merge_color(c_fuchsia, c_maroon, 0.55 + lengthdir_x(0.24, colordir * 0.5 + 30)), merge_color(c_fuchsia, c_maroon, 0.55 + lengthdir_x(0.24, colordir * 0.5)), 0)

//Draw stars.

//i is just a temporary counter.
i = 0

//Draw 72 stars. This can be increased or decreased.
repeat(72) {

    //Draw a silver-white circle, for each iteration from 0 to 72. 
    //starx[i ] and stary[y] are randomised variables determining the random position of the stars within the room, and are defined within the Create event.
    //starsize[i ] randomises the size of the star and is defined within the Create event.
    //starintensity[i ] determines the 'brightness' of the star by randomising the merging of silver with white. If you want all really bright stars, delete
    //random(starintensity[i ]) and change it to 1. Conversely, for dull stars, delete it and replace it with 0. Otherwise, leave it.
    draw_circle_color(starx[i], stary[i], starsize[i], merge_color(merge_color(c_silver, c_white, random(1)), c_white, random(starintensity[i])), c_black, 0)
    i += 1
}

//Draw flashing stars.
with objStar {
    draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, merge_color(c_white, merge_color(c_ltgray, c_silver, random(1)), random(1)), 1)
}

//Begin drawing the sun.
draw_set_blend_mode(bm_add)

//Draws the largest outer ring of the sun, which is a reddish tinge.
draw_circle_color(room_width / 2, room_height / 3 + 90, 180 + lengthdir_x(40, colordir * 0.25), c_maroon, c_black, 0)

//Draws the innermost smaller ring of the sun, which just barely forms a halo around the sun, and is a pinkish tinge.
draw_circle_color(room_width / 2, room_height / 3 + 90, 80 + lengthdir_x(40, colordir * 0.25), c_fuchsia, c_black, 0)

//Draws a faded version of the sun which is darker.
//draw_sprite_general(sprCitySun, 0, 0, 0, 200, 200, room_width / 2 - 100, room_height / 3, 1, 1, 0, c_red, c_red, merge_color(c_fuchsia, c_white, objMain.sunalpha + lengthdir_x(0.5, colordir)), merge_color(c_fuchsia, c_white, objMain.sunalpha + lengthdir_x(0.5, colordir)), objMain.sunalpha)

draw_set_blend_mode(bm_normal)
    //End drawing the sun.

//Draws the actual sun itself, which is maroon-red at the top, and slowly fades down to reddish-white.
draw_sprite_general(sprCitySun, 0, 0, 0, 200, 200, room_width / 2 - 100, room_height / 3 - sunalpha * 10, 1, 1, 0, merge_color(c_red, c_fuchsia, 0.2), merge_color(c_red, c_fuchsia, 0.2), merge_color(c_fuchsia, c_white, 0.5 + lengthdir_x(0.5, colordir)), merge_color(c_fuchsia, c_white, 0.5 + lengthdir_x(0.5, colordir)), sunalpha)

//This optionally adds a mountain into the scene in the background. Remove the comment to add it. The positioning of it is a bit off at the moment, but can be messed around with until satisfactory.
draw_sprite_general(sprMountain, 0, 0, 0, 480, 96, -86, 108, 1.3, 1.3, 0, c_black, c_black, merge_color(c_black, c_aqua, 0.2 + lengthdir_x(0.1, colordir * 0.1)), merge_color(c_black, c_aqua, 0.2 + lengthdir_x(0.1, colordir * 0.1 + 110)), image_alpha)

//Draws the 'city' part itself, basically by stacking a bunch of buildings (sprCityMA) on top of one another, with the image slowing fading from black to a light teal. 
repeat(ceil(room_width / 160) + 1) {

        i = 0
            //Slight motion to the city.
        if x &lt; room_width x += 0.05
        else x -= room_width
        draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 - 17 + float / 2, 138, 3 / 4, 3 / 4, image_angle, merge_color(c_black, c_black, 0.2 + lengthdir_x(0.2, colordir * 0.7)), merge_color(c_black, c_black, 0.2 + lengthdir_x(0.2, colordir + 110)), merge_color(c_black, c_dkgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_black, c_dkgray, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
        draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 - 53 - float / 3, 148, 3 / 4, 3 / 4, image_angle, merge_color(c_black, c_black, 0.2 + lengthdir_x(0.2, colordir * 0.7)), merge_color(c_black, c_black, 0.2 + lengthdir_x(0.2, colordir + 110)), merge_color(c_black, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_black, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
        draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 + float / 2, 166, 3 / 4, 3 / 4, image_angle, merge_color(c_aqua, c_teal, 0.4 + lengthdir_x(0.5, colordir * 0.7)), merge_color(c_aqua, c_teal, 0.4 + lengthdir_x(0.5, colordir + 110)), merge_color(c_dkgray, c_ltgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_dkgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
        draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 + 4 - float / 4, 181, 3 / 4, 3 / 4, image_angle, merge_color(c_dkgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.7)), merge_color(c_black, c_aqua, 0.5 + lengthdir_x(0.5, colordir + 110)), merge_color(c_aqua, c_dkgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_black, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
        draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 + 172 + float, 160, 3 / 4, 3 / 4, image_angle, merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.3, colordir * 0.7)), merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.3, colordir + 110)), merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.3, colordir * 0.8)), merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.3, colordir * 0.8 + 110)), image_alpha)

        draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 - 19 - float / 2, 173, 3 / 4, 3 / 4, image_angle, merge_color(c_black, c_aqua, 0.4 + lengthdir_x(0.4, colordir * 0.7)), merge_color(c_black, c_aqua, 0.4 + lengthdir_x(0.4, colordir + 110)), merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.3, colordir * 0.8)), merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.3, colordir * 0.8 + 110)), image_alpha)
        draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 - 8 + float, 185, 3 / 4, 3 / 4, image_angle, merge_color(c_ltgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.7)), merge_color(c_dkgray, c_aqua, 0.6 + lengthdir_x(0.5, colordir + 110)), merge_color(c_aqua, c_ltgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_ltgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
        draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 + 13 - float / 3, 194, 3 / 4, 3 / 4, image_angle, merge_color(c_ltgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.7)), merge_color(c_dkgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir + 110)), merge_color(c_aqua, c_dkgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_dkgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
        draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 - 49 + float / 4, 209, 3 / 4, 3 / 4, image_angle, merge_color(c_dkgray, c_aqua, 0.4 + lengthdir_x(0.6, colordir * 0.7)), merge_color(c_dkgray, c_aqua, 0.6 + lengthdir_x(0.5, colordir + 110)), merge_color(c_aqua, c_ltgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_aqua, c_ltgray, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
        draw_sprite_general(sprCityMA, 1, 0, 0, 642, 320, i * 160 + 3 - float / 3, 214, 3 / 4, 3 / 4, image_angle, merge_color(c_ltgray, c_aqua, 0.3 + lengthdir_x(0.6, colordir * 0.7)), merge_color(c_ltgray, c_aqua, 0.3 + lengthdir_x(0.5, colordir + 110)), merge_color(c_ltgray, c_ltgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_aqua, c_ltgray, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
        i += 1

    }
    //Draws the front mountainy area. 
color = merge_color(c_black, c_aqua, 0.15)
draw_sprite_general(sprGround, 0, 0, 0, 482, 100, 0, 160, 1, 1, 0, c_black, c_black, color, color, image_alpha)


//Causes the entire room to move.
view_angle[0] = lengthdir_y(1, dir * 1.33)

/*
if on = 0 addy = -creditx * 0.5
else addy = 0

//Initalise colours
color1 = merge_color(c_black, merge_color(c_purple, c_fuchsia, amount * 0.5), 0.1 + random(0.15) + amount * 0.25)
color2 = merge_color(c_black, merge_color(c_maroon, c_black, amount * 0.5), 0.1 + random(0.15) + amount * 0.25)

//Draw sky base.
draw_rectangle_color(0, 0, room_width + 100, room_height + 100, color1, color2, c_black, c_black, 0)
draw_set_blend_mode(bm_add)

//Draw stars.
i = 0 repeat(72) {
    draw_circle_color(starx[i], stary[i], starsize[i], merge_color(merge_color(c_silver, c_white, random(1)), c_white, random(starintensity[i])), c_black, 0)
    i += 1
}

//Draw sky.
draw_circle_color(room_width * 0.67, room_height / 3.5 + addy * 0.5, 480, merge_color(c_black, c_fuchsia, random(amount)), c_black, 0)
draw_circle_color(room_width * 0.67, room_height / 3.5 + addy * 0.5, 32 + random(3), merge_color(c_white, c_purple, flash), c_black, 0)
draw_circle_color(room_width * 0.67, room_height / 3.5 + addy * 0.5, 28 + random(2), c_white, c_black, 0)
draw_set_blend_mode(bm_normal)
dir += 4
color1 = merge_color(c_white, c_silver, 0.5 + amount * 0.5)
color2 = merge_color(c_white, merge_color(c_fuchsia, c_purple, flash), 0.2 + amount * 0.8)

//Draw moon.
draw_sprite_general(sprMidnightMoon, 0, 0, 0, 96, 96, room_width * 0.67 - 24 - textx, room_height / 3.5 - 24 - texty + addy * 0.5, 0.5, 0.5, 0, c_fuchsia, c_fuchsia, c_silver, c_silver, 1)


color1 = merge_color(c_black, c_silver, 0.5 + random(amount * 0.5))

//Draw first skyline.
draw_background_general(bgSkyline2, 0, 0, 640, 320, texty, 1 + textx + addy * 0.75, 1, 1, 0, color1, color1, c_black, c_black, 1)
draw_set_blend_mode(bm_add)

color2 = merge_color(merge_color(c_silver, c_purple, flash), merge_color(c_black, c_white, amount), 0.5 + lengthdir_x(0.25, dir))

//Dry skyline glow.
draw_sprite_general(sprHouseLight, 1, 0, 0, 640, 320, textx, 1 + texty + addy * 0.75, 1, 1, 0, color2, color2, c_black, c_black, 1)
draw_sprite_general(sprHouseLight, 0, 0, 0, 640, 320, textx, 1 + texty + addy, 1, 1, 0, color2, color2, c_black, c_black, 1)
draw_set_blend_mode(bm_normal)

//Draw second skyline.
draw_background_general(bgSkyline1, 0, 0, 640, 320, textx, 1 + texty + addy, 1, 1, 0, color1, color1, c_black, c_black, 1)

//DRAW FLASHING RED BACKGROUND
//draw_set_blend_mode(bm_add)
//draw_surface_ext(global.surf1,1,1,1,1,0,merge_color(c_red,c_ltgray,0.5+lengthdir_x(0.5,dir)),1)
//draw_surface_ext(global.surf1,0,0,1,1,0,c_white,1)
//draw_set_blend_mode(bm_normal)

draw_set_blend_mode(bm_subtract)
my_y = random(32)
my_x = random(32)
draw_sprite_tiled(sprNoise, 0, -my_x, -my_y)

draw_set_blend_mode(bm_subtract)
draw_circle_color(view_wview[0] / 2, view_hview[0] / 2, 370 + random(34), c_black, merge_color(c_gray, merge_color(c_silver, c_white, 0.1 + random(0.4)), 0.15 + random(0.15)), 0)
draw_set_blend_mode(bm_normal)

d3d_set_projection_ortho(0, 0, view_wview[0], view_hview[0], view_angle[0])
*/

if surface_exists(global.surf1) {
    draw_surface_ext(global.surf1, -1, 0, 1, 1, 0, c_black, 1)
    draw_surface_ext(global.surf1, 1, 0, 1, 1, 0, c_black, 1)
    draw_surface_ext(global.surf1, 0, -1, 1, 1, 0, c_black, 1)
    draw_surface_ext(global.surf1, 0, 1, 1, 1, 0, c_black, 1)
    draw_surface_ext(global.surf1, 0, 0, 1, 1, 0, c_white, 1)
}

//Rotate view.
d3d_set_projection_ortho(0,0,view_wview[0],view_hview[0],0)
view_angle[0]=lengthdir_y(1,rotation*0.67)

if alpha &gt; 0 {
    draw_set_alpha(alpha)
    alpha -= 0.1
    draw_set_color(c_white)
    draw_rectangle(0, 0, room_width, room_height, 0)
    draw_set_alpha(1)
}


if fade = 0 {
    if c_amount &lt; 180 {
        c_amount += 10
        color1 = merge_color(c_white, merge_color(c_black, c_white, 0.5 + lengthdir_x(0.5, c_amount)), 0.5 + lengthdir_x(0.5, c_amount))
        if c_amount &gt; 90 color2 = merge_color(c_white, merge_color(c_white, c_white, abs(lengthdir_y(1, c_amount))), abs(lengthdir_y(1, c_amount)))
        else color2 = c_black
        draw_set_blend_mode(bm_subtract)
        draw_rectangle_color(view_xview[0] - 10, view_yview[0] - 10, view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, color1, color2, color2, color1, 0)
        draw_set_blend_mode(bm_normal)
    }
}

if fade = 1 {
    if c_amount &gt; 0 {
        if (global.myscore &gt;= real(string_digits(parscore)) and global.masks[global.currentmask] = 0) or global.newguns &gt; 0 or global.newmasks &gt; 0
        nothing = 1
        else scrSongVolume(c_amount * (1 / 180))
        c_amount -= 5
        color1 = merge_color(c_black, merge_color(c_white, c_black, 0.5 + lengthdir_x(0.5, c_amount)), 0.5 + lengthdir_x(0.5, c_amount))
        if c_amount &gt; 90 color2 = merge_color(c_white, merge_color(c_white, c_black, abs(lengthdir_y(1, c_amount))), abs(lengthdir_y(1, c_amount)))
        else color2 = c_white
        draw_set_blend_mode(bm_subtract)
        draw_rectangle_color(view_xview[0] - 10, view_yview[0] - 10, view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, color2, color1, color1, color2, 0)
        draw_set_blend_mode(bm_normal)
    } else {
        global.levels[scrGetCurrentLevel()] = 1

        if (global.myscore &gt;= real(string_digits(parscore)) and global.masks[global.currentmask] = 0 and scrGradeToNumber(lastgrade) &gt;= 7)
            or global.newmasks &gt; 0 {
                next = rmUnlock
            } else next = scrGetSequence(global.sequence)
        ds_list_clear(global.bonuslist)

        if next = rmUnlock nothing = 1

        else {
            scrStopSong(1)
            scrSongVolume(0)
            scrPlaySong(song)
            scrResetScore()
            scrSaveUnlocked()
        }
        room_goto(next)
    }

    d3d_set_projection_ortho(0, 0, view_wview[0], view_hview[0], 0)
    draw_set_color(c_black)
    draw_set_blend_mode(bm_subtract)
    my_y = random(32)
    draw_sprite_tiled(sprScanlines, 0, 0, my_y)
    draw_set_blend_mode(bm_normal)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
