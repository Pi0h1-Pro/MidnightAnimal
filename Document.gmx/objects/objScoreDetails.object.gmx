<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>colordir = 0
i = 0
alarm[2] = 1 + random(100)
scorex=160
ammox=-160
combox=-160

//Draw stars.
repeat(72) {
    starx[i] = random(room_width)
    stary[i] = random(room_height / 2)
    starsize[i] = random(2) * random(1)
    starintensity[i] = random(1)
    i += 1
}

sunalpha=0
sunshine=0
float=0
horizon=0
instance_create(x,y,objCloud)

//scrCreateBonusList()
//global.title="DECADENCE"ï¿½
if global.xbox = 1 scrInitXboxButtons()
if surface_exists(global.surf1) surface_free(global.surf1)
global.surf1 = surface_create(480, 256)
song = working_directory + "\Rust.mp3"
bonuses = ""
i = 0 repeat ds_list_size(global.bonuslist) {
    bonuses += ds_list_find_value(global.bonuslist, i) + "#"
    i += 1
}
parscore = "/5000pts"
current = 0
dir = 180
dir2 = 0
cdir = 0
gradex = -10
gradeon = 0
alpha = 0
level = global.title
time = global.time
timer = global.timer
myscore = global.myscore

type = "MASS MURDERER"
maxpoints = scrGetMaxpoints()

skillpoints = global.myscore

grade = "F"
if skillpoints &lt; maxpoints * (1 / 16) grade = "F-"
if skillpoints &gt; maxpoints * (2 / 16) grade = "F"
if skillpoints &gt; maxpoints * (3 / 16) grade = "F+"
if skillpoints &gt; maxpoints * (4 / 16) grade = "D-"
if skillpoints &gt; maxpoints * (5 / 16) grade = "D"
if skillpoints &gt; maxpoints * (6 / 16) grade = "D+"
if skillpoints &gt; maxpoints * (7 / 16) grade = "C-"
if skillpoints &gt; maxpoints * (8 / 16) grade = "C"
if skillpoints &gt; maxpoints * (9 / 16) grade = "C+"
if skillpoints &gt; maxpoints * (10 / 16) grade = "B-"
if skillpoints &gt; maxpoints * (11 / 16) grade = "B"
if skillpoints &gt; maxpoints * (12 / 16) grade = "B+"
if skillpoints &gt; maxpoints * (13 / 16) grade = "A-"
if skillpoints &gt; maxpoints * (14 / 16) grade = "A"
if skillpoints &gt; maxpoints * (15 / 16) grade = "A+"
if skillpoints &gt; maxpoints * (16 / 16) grade = "S"
global.currentlevel = scrGetCurrentLevel()
lastgrade = grade
if global.grade[global.currentlevel - 1] &lt; scrGradeToNumber(grade) global.grade[global.currentlevel - 1] = scrGradeToNumber(grade)
if global.myscore &gt; global.highscore[global.currentlevel - 1] global.highscore[global.currentlevel - 1] = global.myscore
highscore = global.highscore[global.currentlevel - 1]
global.lastgrade = scrGradeToNumber(grade)
if string_count("exposure", string_lower(bonuses)) &gt; 6 type = "EXHIBITIONIST"
if string_count("pressure", string_lower(bonuses)) &gt; 3 type = "IMPROVISER"
if string_count("sharp", string_lower(bonuses)) &gt; 2 type = "MARKSMAN"
if string_count("combo", string_lower(bonuses)) &gt; 5 type = "SPREE KILLER"
if string_count("sneaky", string_lower(bonuses)) &gt; 1 type = "ASSASSIN"
if string_count("projectile", string_lower(bonuses)) &gt; 1 type = "PITCHER"
if string_count("door", string_lower(bonuses)) &gt; 4 type = "DOOR MAN"
if string_count("mercy", string_lower(bonuses)) &gt; 2 type = "PACIFIST"
if string_count("7x", string_lower(bonuses)) &gt; 0 or string_count("6x", string_lower(bonuses)) &gt; 0 or string_count("5x", string_lower(bonuses)) &gt; 0 or string_count("4x", string_lower(bonuses)) &gt; 0 type = "HITMAN"
if string_count("10x", string_lower(bonuses)) &gt; 0 or string_count("8x", string_lower(bonuses)) &gt; 0 or string_count("9x", string_lower(bonuses)) &gt; 0 or string_count("11x", string_lower(bonuses)) &gt; 0 type = "SPECIALIST"
if string_count("12x", string_lower(bonuses)) &gt; 0 or string_count("13x", string_lower(bonuses)) &gt; 0 or string_count("14x", string_lower(bonuses)) &gt; 0 or string_count("15x", string_lower(bonuses)) &gt; 0 type = "PROFESSIONAL"
if string_count("execution", string_lower(bonuses)) &gt; 4 type = "EXECUTIONER"
if string_count("execution", string_lower(bonuses)) &gt; 10 type = "SADIST"
if string_count("sharp", string_lower(bonuses)) &gt; 6 type = "PACIFIST"
if string_count("exposure", string_lower(bonuses)) = 0 type = "GHOST"
i = 0
housex = 0

dir = random(360)
factor = 0
fade = 0
c_amount = 0







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    shinex = random(room_width)
    shiney = random(room_height / 2)
    star = instance_create(shinex, shiney, objStar)
    star.image_alpha = choose(0.3, 0.5, 0.7, 0.9)
    star.image_xscale = 0.5 + random(2)
    star.image_yscale = image_xscale
    alarm[2]=1+random(100)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.xbox = 1 {
    if checkbutton(0, getid(5)) {
        if presstart = 0 {
            presstart = 1
            scrXboxScoreDetailsStart()
        }
    } else presstart = 0
}

SteamRunCallbacks()
if !surface_exists(global.surf1) {
    global.surf1 = surface_create(room_width, room_height)
    surface_set_target(global.surf1)
    draw_clear_alpha(c_black, 0)
    surface_reset_target()
}
surface_set_target(global.surf1)
draw_clear_alpha(c_black, 0)

//Draw lines.
        draw_set_blend_mode(bm_subtract)
        i = 0
        repeat(7) {
            draw_rectangle_color(0, 11 + i * 5, 120 + combox + lengthdir_x(8, dir + i * 45), 14 + i * 5, c_black, c_dkgray, c_black, c_dkgray, 0)
            i += 1
        }

        i = 0
        repeat(6) {
            draw_rectangle_color(view_wview[0] - 120 + combox, 11 + i * 5, view_wview[0], 14 + i * 5, c_black, c_dkgray, c_dkgray, c_black, 0)
            //draw_rectangle_color(0, 217 + i * 5, 120 + ammox + lengthdir_x(8, dir + i * 45), 220 + i * 5, c_dkgray, c_black, c_black, c_dkgray, 0)
            i += 1
        }
        draw_set_blend_mode(bm_normal)
        
     if combox &lt; 0 combox += 8
        else if combox &gt; -160 combox -= 8
/*
i = 0 repeat(7) {
    draw_line_color(0, 12 + i * 3, 400, 12 + i * 3, merge_color(c_black, c_fuchsia, 0.25 + lengthdir_x(0.25, dir2 * 4 + i * 35)),
        merge_color(c_black, c_fuchsia, 0.25 + lengthdir_x(0.25, dir2 * 4 + i * 35) + 180))
    i += 1
}
*/

//Draw scene name and time.
draw_set_font(fntDetails)
draw_set_halign(fa_left)
draw_set_valign(fa_center)
//draw_set_color(merge_color(c_white, c_dkgray, 0.5 + lengthdir_x(0.5, dir2 * 10)))
//draw_text(11, 22, "SCENE: " + '"' + level + '"' + "#TIME: " + string(floor(time / 60)) + "s")
draw_set_color(c_white)
draw_text(12, 22, "SCENE: " + '"' + level + '"' + "#TIME: " + string(floor(time / 60)) + "s")

//Draw highscore and current score.
draw_set_halign(fa_right)
//draw_set_color(merge_color(c_white, c_dkgray, 0.5 + lengthdir_x(0.5, dir2 * 10)))
//draw_text(463, 22, "HIGHSCORE: " + string(highscore) + "#SCORE: " + string(myscore))
draw_set_color(c_white)
draw_text(462, 22, "HIGHSCORE: " + string(highscore) + "#SCORE: " + string(myscore))

//Draw playstyle.
draw_set_halign(fa_center)
if gradeon = 1 {
    //draw_set_color(merge_color(c_red, c_maroon, 0.5 + lengthdir_x(0.5, dir2 * 10)))
    //draw_text(240, 22, "PLAY STYLE:#" + '"' + type + '"')
    draw_set_color(merge_color(c_white, c_white, 0.5 + lengthdir_x(0.5, dir2 * 10 + 180)))
    draw_text(239, 22, "PLAY STYLE:#" + '"' + type + '"')
}

/*
//Draw list of feats.
draw_set_font(fntFeats)
if dir &lt; 180 dir += 18
else {
    if current &lt; ds_list_size(global.bonuslist) current += 1 dir = 0
}
draw_y = 220
i = current - 1
cdir += 4
times = current - 1
if times &gt; 13 times = 13
ii = 0

//Draw feats.
repeat(times) {
    draw_set_color(merge_color(merge_color(c_fuchsia, c_orange, 0.5 + lengthdir_x(0.5, cdir + i * 20)), c_aqua, 0.5 + lengthdir_x(0.5, cdir + i * 30)))
    mystring = ds_list_find_value(global.bonuslist, i)
    draw_text(160 - string_width(mystring) * 0.5 + lengthdir_x(3, cdir + i * 40), 190 - ii * (12), mystring) //460
    i -= 1
    ii += 1
}

if current &lt; ds_list_size(global.bonuslist) {
    times = 1 + abs(lengthdir_y(19, dir))
    mystring = ds_list_find_value(global.bonuslist, current)
    i = 0
    
    //Set style of popups.
    draw_set_font(fntFeatsLarge)
    repeat(times) {
        draw_set_color(merge_color(merge_color(c_white, c_white, 0.5 + lengthdir_x(0.5, cdir * 3)), merge_color(c_orange, c_aqua, 0.75 + lengthdir_x(0.25, cdir * 2)), 1 * (times / 20)))
        draw_text_transformed(160 - string_width(mystring) * 0.325, 210 + i * 0.1, mystring, 0.65 + i * 0.005, 1 + i * 0.025, 0) //460
        i += 1
    }
} else */
//{
    if gradex &lt; 380 gradex += 10 //280
    else {
        if gradeon = 0 {
            gradeon = 1
            if grade = "S"
            SteamSetAchievement("ACH_ACED_IT") scrCheckGrades() alpha = 1
        }
//    }
    
    //Draw grade.
    draw_set_font(fntGrading)
    mystring = "GRADE:"
    draw_set_color(merge_color(c_yellow, c_fuchsia, 0.5 + lengthdir_x(0.5, cdir * 3)))
    draw_text_transformed(gradex - string_width(mystring) * 0.5, 215, mystring, 1, 1, 0)
    if gradeon = 1 {
        draw_set_font(fntGrade)
        amount = -1 + lengthdir_x(2, cdir)
        if amount &lt; 0 amount = 0
        
        //Set colours of S rank and normal rank.
        if grade = "S" {
            draw_set_color(merge_color(c_yellow, c_white, amount))
        } else
            draw_set_color(merge_color(c_red, c_maroon, amount))
        
        draw_set_halign(fa_left)
        
        //Draw final grade.
        draw_text_transformed(390, 220, grade, 0.95 + amount * 0.05, 0.9 + amount * 0.1, 0)
    }
}
surface_reset_target()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.xbox=1 exit
if gradeon=1 fade=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sunalpha&gt;=1 {if sunshine&lt;1 sunshine+=0.05}
if sunalpha&lt;1 sunalpha+=0.01

if float&gt;=room_width {if horizon&lt;1 horizon+=0.05}
if float&lt;room_width float+=0.05

//Draws the background of the room, which is the black-reddish sky.
draw_rectangle_color(-20, -20, room_width + 20, room_height + 20, merge_color(c_black, c_black, 0.15 + lengthdir_x(0.15, colordir * 0.25)), merge_color(c_black, c_black, 0.15 + lengthdir_x(0.15, colordir * 0.25 + 45)), merge_color(c_fuchsia, c_maroon, 0.55 + lengthdir_x(0.24, colordir * 0.5 + 30)), merge_color(c_fuchsia, c_maroon, 0.55 + lengthdir_x(0.24, colordir * 0.5)), 0)

//Draw stars.

//i is just a temporary counter.
i = 0

//Draw 72 stars. This can be increased or decreased.
repeat(72) {

    //Draw a silver-white circle, for each iteration from 0 to 72. 
    //starx[i] and stary[y] are randomised variables determining the random position of the stars within the room, and are defined within the Create event.
    //starsize[i] randomises the size of the star and is defined within the Create event.
    //starintensity[i] determines the 'brightness' of the star by randomising the merging of silver with white. If you want all really bright stars, delete
    //random(starintensity[i]) and change it to 1. Conversely, for dull stars, delete it and replace it with 0. Otherwise, leave it.
    draw_circle_color(starx[i], stary[i], starsize[i], merge_color(merge_color(c_silver, c_white, random(1)), c_white, random(starintensity[i])), c_black, 0)
    i += 1
}

//Draw flashing stars.
with objStar {
    draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, merge_color(c_white, merge_color(c_ltgray, c_silver, random(1)), random(1)), 1)
}

//Begin drawing the sun.
draw_set_blend_mode(bm_add)

//Draws the largest outer ring of the sun, which is a reddish tinge.
draw_circle_color(room_width / 2, room_height / 3 + 90, 180 + lengthdir_x(40, colordir * 0.25), c_maroon, c_black, 0)

//Draws the innermost smaller ring of the sun, which just barely forms a halo around the sun, and is a pinkish tinge.
draw_circle_color(room_width / 2, room_height / 3 + 90, 80 + lengthdir_x(40, colordir * 0.25), c_fuchsia, c_black, 0)

//Draws a faded version of the sun which is darker.
//draw_sprite_general(sprCitySun, 0, 0, 0, 200, 200, room_width / 2 - 100, room_height / 3, 1, 1, 0, c_red, c_red, merge_color(c_fuchsia, c_white, objMain.sunalpha + lengthdir_x(0.5, colordir)), merge_color(c_fuchsia, c_white, objMain.sunalpha + lengthdir_x(0.5, colordir)), objMain.sunalpha)

draw_set_blend_mode(bm_normal)
//End drawing the sun.

//Draws the actual sun itself, which is maroon-red at the top, and slowly fades down to reddish-white.
draw_sprite_general(sprCitySun, 0, 0, 0, 200, 200, room_width / 2 - 100, room_height / 3 - sunalpha*10, 1, 1, 0, merge_color(c_red, c_fuchsia, 0.2), merge_color(c_red, c_fuchsia, 0.2), merge_color(c_fuchsia, c_white, 0.5 + lengthdir_x(0.5, colordir)), merge_color(c_fuchsia, c_white, 0.5 + lengthdir_x(0.5, colordir)), sunalpha)
    
//This optionally adds a mountain into the scene in the background. Remove the comment to add it. The positioning of it is a bit off at the moment, but can be messed around with until satisfactory.
draw_sprite_general(sprMountain,0,0,0,480,96,-86,108,1.3,1.3,0,c_black,c_black,merge_color(c_black,c_aqua,0.2+lengthdir_x(0.1,colordir*0.1)),merge_color(c_black,c_aqua,0.2+lengthdir_x(0.1,colordir*0.1+110)),image_alpha)

//Draws the 'city' part itself, basically by stacking a bunch of buildings (sprCityMA) on top of one another, with the image slowing fading from black to a light teal. 
repeat(ceil(room_width / 160) + 1) {

    i = 0
    //Slight motion to the city.
    if x &lt; room_width x += 0.05
    else x -= room_width
    draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 - 17 + float/2, 138, 3/4, 3/4, image_angle, merge_color(c_black, c_black, 0.2 + lengthdir_x(0.2, colordir * 0.7)), merge_color(c_black, c_black, 0.2 + lengthdir_x(0.2, colordir + 110)), merge_color(c_black, c_dkgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_black, c_dkgray, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
    draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 - 53 - float/3, 148, 3/4, 3/4, image_angle, merge_color(c_black, c_black, 0.2 + lengthdir_x(0.2, colordir * 0.7)), merge_color(c_black, c_black, 0.2 + lengthdir_x(0.2, colordir + 110)), merge_color(c_black, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_black, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
    draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 + float/2, 166, 3/4, 3/4, image_angle, merge_color(c_aqua, c_teal, 0.4 + lengthdir_x(0.5, colordir * 0.7)), merge_color(c_aqua, c_teal, 0.4 + lengthdir_x(0.5, colordir + 110)), merge_color(c_dkgray, c_ltgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_dkgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
    draw_sprite_general(sprCityMA,0,0,0,642,320,i * 160+4 - float/4,181,3/4,3/4 ,image_angle,merge_color(c_dkgray,c_aqua,0.5+lengthdir_x(0.5,colordir*0.7)),merge_color(c_black,c_aqua,0.5+lengthdir_x(0.5,colordir+110)),merge_color(c_aqua,c_dkgray,0.5+lengthdir_x(0.5,colordir*0.8)),merge_color(c_black,c_aqua,0.5+lengthdir_x(0.5,colordir*0.8+110)),image_alpha)
    draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 + 172 + float, 160, 3/4, 3/4, image_angle, merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.3, colordir * 0.7)), merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.3, colordir + 110)), merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.3, colordir * 0.8)), merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.3, colordir * 0.8 + 110)), image_alpha)

    draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 - 19 - float/2, 173, 3/4, 3/4, image_angle, merge_color(c_black, c_aqua, 0.4 + lengthdir_x(0.4, colordir * 0.7)), merge_color(c_black, c_aqua, 0.4 + lengthdir_x(0.4, colordir + 110)), merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.3, colordir * 0.8)), merge_color(c_black, c_aqua, 0.3 + lengthdir_x(0.3, colordir * 0.8 + 110)), image_alpha)
    draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 - 8 + float, 185, 3/4, 3/4, image_angle, merge_color(c_ltgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.7)), merge_color(c_dkgray, c_aqua, 0.6 + lengthdir_x(0.5, colordir + 110)), merge_color(c_aqua, c_ltgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_ltgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
    draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 + 13 - float/3, 194, 3/4, 3/4, image_angle, merge_color(c_ltgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.7)), merge_color(c_dkgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir + 110)), merge_color(c_aqua, c_dkgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_dkgray, c_aqua, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
    draw_sprite_general(sprCityMA, 0, 0, 0, 642, 320, i * 160 - 49 + float/4, 209, 3/4, 3/4, image_angle, merge_color(c_dkgray, c_aqua, 0.4 + lengthdir_x(0.6, colordir * 0.7)), merge_color(c_dkgray, c_aqua, 0.6 + lengthdir_x(0.5, colordir + 110)), merge_color(c_aqua, c_ltgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_aqua, c_ltgray, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
    draw_sprite_general(sprCityMA, 1, 0, 0, 642, 320, i * 160 + 3 - float/3, 214, 3/4, 3/4, image_angle, merge_color(c_ltgray, c_aqua, 0.3 + lengthdir_x(0.6, colordir * 0.7)), merge_color(c_ltgray, c_aqua, 0.3 + lengthdir_x(0.5, colordir + 110)), merge_color(c_ltgray, c_ltgray, 0.5 + lengthdir_x(0.5, colordir * 0.8)), merge_color(c_aqua, c_ltgray, 0.5 + lengthdir_x(0.5, colordir * 0.8 + 110)), image_alpha)
    i += 1

}
//Draws the front mountainy area. 
color = merge_color(c_black, c_aqua, 0.15)
draw_sprite_general(sprGround, 0, 0, 0, 482, 100, 0, 160, 1, 1, 0, c_black, c_black, color, color, image_alpha)




/*dir2 += 0.25

color1 = c_white
color2 = make_color_hsv(0, 255, 15)
color3 = merge_color(c_purple, c_fuchsia, 0.5 + lengthdir_x(0.5, dir2 * 3))
    //merge_color(c_white,merge_color(merge_color(c_white,c_red,0.5+lengthdir_x(0.5,dir2*3.12)),c_white,0.125+lengthdir_y(0.125,dir2*1.73)),0.5+lengthdir_y(0.5,dir2*1.73))
d3d_set_projection_ortho(0, 0, view_wview[0], view_hview[0], 0)
draw_rectangle_color(view_xview[0], view_yview[0] + 40, view_xview[0] + view_wview[0], view_yview[0] + view_hview[0] - 40,
    c_maroon, c_fuchsia, c_purple, c_white, 0)


//SUN
draw_set_color(merge_color(color1, color3, 0.5))
draw_circle(room_width / 2, room_height * 0.6, 63, 0)
draw_circle_color(room_width / 2, room_height * 0.6, 60,
    merge_color(c_fuchsia, c_purple, 0.25 + lengthdir_x(0.25, dir2 * 2)),
    merge_color(c_white, c_purple, 0.5 + lengthdir_x(0.5, dir2 * 3)), 0)
global.color = merge_color(color3, color1, 0.5)
draw_rectangle_color(view_xview[0],
    room_height * 0.6, view_xview[0] + view_wview[0], view_yview[0] + view_hview[0] - 40,
    c_white, c_maroon, c_purple, c_fuchsia, 0)

//WAVES
with objWave {
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle,
        merge_color(global.color, c_white, 0.5 + lengthdir_x(0.5, colordir)), image_alpha)
}

//SKYLINE
draw_set_blend_mode(bm_subtract)
draw_rectangle_color(view_xview[0], view_hview[0] - 39, view_xview[0] + view_wview[0], view_yview[0] + view_hview[0] - 50,
    c_black, c_black,
    c_fuchsia, c_maroon, 0)
draw_set_blend_mode(bm_normal)
if housex &gt; -144 housex -= 0.05
else housex += 144

i = 0 repeat(11) {
    draw_sprite_ext(sprHouseSilhouettes, 1, housex * 0.666 + i * 48, room_height * 0.6 - 5, 1, 1, 0, merge_color(c_black, global.color, 0.25), 1)
    draw_sprite_ext(sprHouseSilhouettes, 0, housex * 0.333 + i * 48, room_height * 0.6 - 3, 1, 1, 0, merge_color(c_black, global.color, 0.5), 1)
    draw_sprite_ext(sprHouseSilhouettes, 0, housex + i * 48, room_height * 0.6, 1, 1, 0, merge_color(c_black, global.color, 0.75), 1)
    i += 1
}

*/
draw_surface_ext(global.surf1, -1, 0, 1, 1, 0, c_black, 1)
draw_surface_ext(global.surf1, 1, 0, 1, 1, 0, c_black, 1)
draw_surface_ext(global.surf1, 0, -1, 1, 1, 0, c_black, 1)
draw_surface_ext(global.surf1, 0, 1, 1, 1, 0, c_black, 1)
draw_surface_ext(global.surf1, 0, 0, 1, 1, 0, c_white, 1)
if alpha &gt; 0 {
    draw_set_alpha(alpha)
    alpha -= 0.1
    draw_set_color(c_white)
    draw_rectangle(0, 0, room_width, room_height, 0)
    draw_set_alpha(1)
}

//d3d_set_projection_ortho(0, 0, view_wview[0], view_hview[0], 0)
//view_angle[0] = lengthdir_y(0.67, rotation * .67)
if fade = 0 {
    if c_amount &lt; 180 {
        c_amount += 10
        color1 = merge_color(c_white, merge_color(c_black, c_white, 0.5 + lengthdir_x(0.5, c_amount)), 0.5 + lengthdir_x(0.5, c_amount))
        if c_amount &gt; 90 color2 = merge_color(c_white, merge_color(c_white, c_white, abs(lengthdir_y(1, c_amount))), abs(lengthdir_y(1, c_amount)))
        else color2 = c_black
        draw_set_blend_mode(bm_subtract)
        draw_rectangle_color(view_xview[0] - 10, view_yview[0] - 10, view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, color1, color2, color2, color1, 0)
        draw_set_blend_mode(bm_normal)
    }
}

if fade = 1 {
    if c_amount &gt; 0 {
        if (global.myscore &gt;= real(string_digits(parscore)) and global.masks[global.currentmask] = 0) or global.newguns &gt; 0 or global.newmasks &gt; 0
        nothing = 1
        else scrSongVolume(c_amount * (1 / 180))
        c_amount -= 5
        color1 = merge_color(c_black, merge_color(c_white, c_black, 0.5 + lengthdir_x(0.5, c_amount)), 0.5 + lengthdir_x(0.5, c_amount))
        if c_amount &gt; 90 color2 = merge_color(c_white, merge_color(c_white, c_black, abs(lengthdir_y(1, c_amount))), abs(lengthdir_y(1, c_amount)))
        else color2 = c_white
        draw_set_blend_mode(bm_subtract)
        draw_rectangle_color(view_xview[0] - 10, view_yview[0] - 10, view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, color2, color1, color1, color2, 0)
        draw_set_blend_mode(bm_normal)
    } else {
        global.levels[scrGetCurrentLevel()] = 1

        if (global.myscore &gt;= real(string_digits(parscore)) and global.masks[global.currentmask] = 0 and scrGradeToNumber(lastgrade) &gt;= 7)
            or global.newmasks &gt; 0 {
                next = rmUnlock
            }
            //else {if global.newguns&gt;0 next=rmWeaponUnlock else 
        else next = scrGetSequence(global.sequence)
        ds_list_clear(global.bonuslist)

        if next = rmUnlock
            //or next=rmWeaponUnlock 
        nothing = 1

        else {
            scrStopSong(1)
            scrSongVolume(0)
            scrPlaySong(song)
            scrResetScore()
            scrSaveUnlocked()

        }
        room_goto(next)
    }


    //}


    d3d_set_projection_ortho(0, 0, view_wview[0], view_hview[0], 0)
    draw_set_color(c_black)
    draw_set_blend_mode(bm_subtract)
    my_y = random(32)
    draw_sprite_tiled(sprScanlines, 0, 0, my_y)
    draw_set_blend_mode(bm_subtract)
    draw_circle_color(view_wview[0] / 2, view_hview[0] / 2, 240 + random(24), c_black, merge_color(c_black, c_white, 0.25 + random(0.25)), 0)
    draw_set_blend_mode(bm_normal)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>exit if keyboard_check(vk_shift) room_restart() else scrCreateBonusList()</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
