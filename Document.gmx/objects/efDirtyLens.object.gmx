<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dust=background_get_texture(efDust)
hmask=background_get_texture(efHalo)

dust_sampler = shader_get_sampler_index(SSLF_Dusty_shdr,"lensDirtTex")
hmask_sampler = shader_get_sampler_index(SSLF_Dusty_shdr,"haloMaskTex")

texture_set_repeat(false)

blur_size=15
down_sample=12

thresh_surf=surface_create(view_wview/down_sample,view_hview/down_sample)
blur_surf=surface_create(view_wview,view_hview)
bloom_surf=surface_create(view_wview,view_hview)

HBlur_uni = shader_get_uniform(gaussian_horizontal_shdr,"time")
VBlur_uni = shader_get_uniform(gaussian_vertical_shdr,"time")

HRes_uni = shader_get_uniform(gaussian_horizontal_shdr,"resolution")
VRes_uni = shader_get_uniform(gaussian_horizontal_shdr,"resolution")


DRes_uni = shader_get_uniform(SSLF_Dusty_shdr,"TEX_DIMENSIONS")
DMul_uni = shader_get_uniform(SSLF_Dusty_shdr,"FXMul")
DHal_uni = shader_get_uniform(SSLF_Dusty_shdr,"ENABLE_HALO")
DCAbb_uni = shader_get_uniform(SSLF_Dusty_shdr,"ENABLE_CHROMATIC_DISTORTION")
DGhosts_uni = shader_get_uniform(SSLF_Dusty_shdr,"MAX_GHOSTS")
DGhostDisp_uni = shader_get_uniform(SSLF_Dusty_shdr,"GHOST_DISPERSAL")


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(thresh_surf){
    thresh_surf=surface_create(view_wview/down_sample,view_hview/down_sample);
    blur_surf=surface_create(view_wview,view_hview);
    bloom_surf=surface_create(view_wview,view_hview);
}

if surface_get_width(blur_surf)!=view_wport or surface_get_height(blur_surf)!=view_hport{

    surface_resize(thresh_surf,view_wview/down_sample,view_hview/down_sample);
    surface_resize(blur_surf,view_wview,view_hview);
    surface_resize(bloom_surf,view_wview,view_hview);

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate post-processing.
shader_set(thresh_shdr)
surface_set_target(thresh_surf)
draw_clear(0)
draw_surface_ext(application_surface,0,0,1/down_sample,1/down_sample,0,c_white,1)
surface_reset_target()
shader_reset()

surface_set_target(blur_surf)
shader_set(gaussian_horizontal_shdr)
shader_set_uniform_f(HBlur_uni,blur_size)
shader_set_uniform_f(HRes_uni,view_wview,view_hview)
draw_surface_stretched(thresh_surf,0,0,view_wview,view_hview)
shader_reset()
surface_reset_target()

surface_set_target(bloom_surf)
shader_set(gaussian_vertical_shdr)
shader_set_uniform_f(VBlur_uni,blur_size)
shader_set_uniform_f(VRes_uni,view_wview,view_hview)
draw_surface(blur_surf,0,0)
shader_reset()
surface_reset_target()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Apply the effect.

shader_set(SSLF_Dusty_shdr)
texture_set_stage(dust_sampler,dust)
texture_set_stage(hmask_sampler,hmask)
shader_set_uniform_f(DRes_uni,view_wport,view_hport)
shader_set_uniform_f(DMul_uni,DBEffect)
shader_set_uniform_f(DHal_uni,DB_Halos)
shader_set_uniform_f(DCAbb_uni,DB_ChromAbb)
shader_set_uniform_i(DGhosts_uni,DGhosts)
shader_set_uniform_f(DGhostDisp_uni,DGhostDispersal)
draw_set_blend_mode(bm_add)
//draw_surface_stretched(bloom_surf,0,0,view_wport,view_hport)
draw_surface_stretched(bloom_surf,0,0,display_get_gui_width(),display_get_gui_height())
draw_set_blend_mode(bm_normal)
shader_reset()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
