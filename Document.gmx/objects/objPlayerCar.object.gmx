<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprJohnCar</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>done = 0
wait = 0
start = 30
enter = 0
engine=0
visited=0
doorindex = 0
trunkindex = 0

// Allow the player to interact with the trunk.
trunk = instance_exists(objPlayer)

// Create floor interior.
my_id = instance_create(x, y, objPlayerCarFloor)
my_id.image_angle = image_angle

// Create trunk interior.
my_id = instance_create(x, y, objPlayerCarTrunkInterior)
my_id.image_angle = image_angle

// Create roof.
if global.done = 1 {
    my_id = instance_create(x, y, objPlayerCarRoof)
    my_id.image_angle = image_angle
}

// Create weapon in trunk.
my_id = instance_create(x + lengthdir_x(43, image_angle + 180), y + lengthdir_y(43, image_angle + 180), objWeaponSpawn)
my_id.image_index = 1
my_id.ammo = scrGetSpecificAmmo(my_id.image_index)
my_id.image_angle = 90 + image_angle + random(10)
my_id.depth = -2


// Create interactive trunk.
my_id = instance_create(x, y, objPlayerCarTrunk)
my_id.image_angle = image_angle

// Centre on car if player doesn't exist.
if !instance_exists(objPlayer) {
    on = 1 
    camera_centre(x, y) 
    depth = -1
} else on = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if !scrMovingPlayerExists() exit
index = image_index
mask_index = sprite_index
image_index = 0
 
// Open trunk if enemies exist.
if trunk {

    // If the player is a certain distance away...
    if instance_exists(objPlayer){
        if point_distance(objPlayer.x, objPlayer.y, x + lengthdir_x(48, image_angle + 180), y + lengthdir_y(48, image_angle + 180)) &lt; 32 {
        
            // Open trunk.
            if trunkindex &lt; 6 {
                if trunkindex = 0 sound_ps(sndTrunkOpen)
                trunkindex += 0.5
            }
        } else {
        
            // Close trunk.
            if trunkindex &gt; 0.25 trunkindex -= 0.25 else {
                if trunkindex &gt; 0 sound_ps(sndTrunkClose) trunkindex = 0
            }
        }
    }
}

if on = 1 {
    if done = 0 {
        if doorindex &lt; 6 doorindex += 0.2 else {
            my_id = instance_create(x, y, objPlayer)
            my_id.direction = image_angle + 90
            global.active = 0
            
            with objPlayerDead instance_destroy()
            wait = 18
            done = 1
        }
    }
}

if wait &gt; 0 {
    wait -= 1
    my_id.direction = image_angle + 90
    my_id.x += lengthdir_x(2, image_angle + 90)
    my_id.y += lengthdir_y(2, image_angle + 90)
    my_id.legindex += 0.35
    my_id.image_index += 0.2
} else {
    if done = 1 {
        my_id.active = 1 done = 2 scrSaveFloor() on = 2
    }
}

if done = 2 and global.done = 0 {
    if doorindex &gt; 0.2 doorindex -= 0.2
    else {
        if doorindex &gt; 0 sound_ps(sndCarClose) doorindex = 0
    }
}

if scrMovingPlayerExists() and global.done = 1 {
    if point_distance(x + lengthdir_x(6, image_angle), y, objPlayer.x, objPlayer.y) &lt; 64 and objPlayer.visible = 1 {
        if enter = 0 {
            if doorindex &lt; 6 {
                if doorindex = 0 sound_ps(sndCarOpen)
                doorindex += 0.5
            }
        } else {
            if doorindex &gt; 0.25 doorindex -= 0.25
            else {
                if doorindex &gt; 0 sound_ps(sndCarClose) 
                doorindex = 0
            }
        }
    } else {
        if doorindex &gt; 0.25 doorindex -= 0.25 else {
            if doorindex &gt; 0 sound_ps(sndCarClose) doorindex = 0
        }
    }
    
    if place_meeting(x, y, objPlayer) or enter = 1 {
        enter = 1
        //solid = 0
        depth = -5
        global.active = 0
        if point_distance(x, y, objPlayer.x, objPlayer.y) &gt; 12 {
            objPlayer.x += lengthdir_x(2, point_direction(objPlayer.x, objPlayer.y, x, y))
            objPlayer.y += lengthdir_y(2, point_direction(objPlayer.x, objPlayer.y, x, y))
        } else {
            with objPlayer visible = 0
            if sprite_index = sprJohnCar {
                if image_index &gt; 0.25 image_index -= 0.25
                else {
                    sound_ps(sndCarEngine) 
                    sprite_index = sprJohnCarStart 
                    image_index = 0
                }
            }
            
            if sprite_index = sprJohnCarStart {
                if image_index &lt; 5 image_index += 0.25
                if start &gt; 0 start -= 1
                else {
                    room_persistent = 0
                    objEffector.fade = 1
                    room = rmLevelSelect
                }
            }

        }
        mask_index = sprJohnCarMask
    } else image_index = index
    mask_index = sprJohnCarMask
    
    if global.done = 0 {
        mask_index = sprite_index exit
    }
    if instance_exists(objPlayer) and global.done = 0 {
        mask_index = sprite_index exit
    }
}

mask_index = sprJohnCarMask
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>revisit = 0
/*if instance_exists(objPlayerMouseHouse) {
    if global.done = 1 nextroom = rmLevelTransition
    else {
        nextroom = rmInterlude global.interlude = scrCarNextInterlude()
    }
} else */
nextroom = rmMenu;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index = sprJohnCarStart {
    addx = -0.5 + random(1)
    addy = -0.5 + random(1)
} else {
    addx = 0
    addy = 0
}

draw_sprite_ext(sprite_index,image_index,x+2,y+2,image_xscale,image_yscale,image_angle,c_black,0.5)

draw_sprite_ext(sprJohnCarDoor, 0, x+lengthdir_x(14,image_angle)+lengthdir_x(22,image_angle+90) + addx, y+lengthdir_y(14,image_angle)+lengthdir_y(22,image_angle+90) + addy, image_xscale, image_yscale, image_angle-doorindex*10, image_blend, image_alpha)
draw_sprite_ext(sprite_index, image_index, x + addx, y + addy, image_xscale, image_yscale, image_angle, image_blend, image_alpha)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
