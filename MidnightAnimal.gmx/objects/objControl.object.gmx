<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lsys_init(1)

scrGetAlpha()

l = lsys_light_add(96, 96, 160, c_white);

//merge_walls(objWall);

with (objWall)
{
    c = lsys_caster_add(x, y);
    lsys_caster_add_point(c, 0, 0);
    lsys_caster_add_point(c, sprite_width, 0);
    lsys_caster_add_point(c, sprite_width, sprite_height);
    lsys_caster_add_point(c, 0, sprite_height);
}

with (objDoorV)
{
    c = lsys_caster_add(x, y);
    lsys_caster_add_point(c, 0, 0);
    lsys_caster_add_point(c, sprite_width, 0);
    lsys_caster_add_point(c, sprite_width, sprite_height);
    lsys_caster_add_point(c, 0, sprite_height);
}

with (objDoorV2)
{
    c = lsys_caster_add(x, y);
    lsys_caster_add_point(c, 0, 0);
    lsys_caster_add_point(c, sprite_width, 0);
    lsys_caster_add_point(c, sprite_width, sprite_height);
    lsys_caster_add_point(c, 0, sprite_height);
}

with (objDoorH)
{
    c = lsys_caster_add(x, y);
    lsys_caster_add_point(c, 0, 0);
    lsys_caster_add_point(c, sprite_width, 0);
    lsys_caster_add_point(c, sprite_width, sprite_height);
    lsys_caster_add_point(c, 0, sprite_height);
}

with (objDoorH2)
{
    c = lsys_caster_add(x, y);
    lsys_caster_add_point(c, 0, 0);
    lsys_caster_add_point(c, sprite_width, 0);
    lsys_caster_add_point(c, sprite_width, sprite_height);
    lsys_caster_add_point(c, 0, sprite_height);
}

with (objSolid)
{
    c = lsys_caster_add(x, y);
    lsys_caster_add_point(c, -sprite_width/2, -sprite_height/2);
    lsys_caster_add_point(c, sprite_width/2, -sprite_height/2);
    lsys_caster_add_point(c, sprite_width/2, sprite_height/2);
    lsys_caster_add_point(c, -sprite_width/2, sprite_height/2);
}

with (objWallCorner)
{
    c = lsys_caster_add(x, y);
    lsys_caster_add_point(c, 0, 0);
    lsys_caster_add_point(c, sprite_width, 0);
    lsys_caster_add_point(c, sprite_width, sprite_height);
    lsys_caster_add_point(c, 0, sprite_height);
}

if global.done = 1 instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(global._lsys_surface) {
    lsys_init();
}

if instance_exists(objPlayer) and surface_exists(global._lsys_surface) {
    lsys_light_set_position(l, objPlayer.x, objPlayer.y);
    lsys_update(alpha);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alpha = max(0, alpha - 0.05);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alpha = min(1, alpha + 0.05);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lsys_free();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(global._lsys_surface) {
    lsys_draw();
}

/*
var i, j, xp, yp;
//Draw boundaries around objects which cast shadows.
draw_set_color(c_red);
for (i = 0; i &lt; global._lsys_casters; i += 1)
{
    if (global._lsys_caster_deleted[i])
        continue;
    draw_primitive_begin(pr_linestrip);
    for (j = 0; j &lt; global._lsys_caster_points[i]; j += 1)
    {
        xp = global._lsys_caster_xpos[i] + global._lsys_caster_point_x[i, j];
        yp = global._lsys_caster_ypos[i] + global._lsys_caster_point_y[i, j];
        draw_vertex(xp/global._lsys_quality, yp/global._lsys_quality);
    }
    xp = global._lsys_caster_xpos[i] + global._lsys_caster_point_x[i, 0];
    yp = global._lsys_caster_ypos[i] + global._lsys_caster_point_y[i, 0];
    draw_vertex(xp/global._lsys_quality, yp/global._lsys_quality);
    draw_primitive_end();
    draw_circle_color((global._lsys_caster_xpos[i] + global._lsys_caster_cx[i])/global._lsys_quality, (global._lsys_caster_ypos[i] + global._lsys_caster_cy[i])/global._lsys_quality, 8, c_red, c_red, true);
}

//Draw circle around caster of light.
draw_set_color(c_yellow);
for (i = 0; i &lt; global._lsys_lights; i += 1)
{
    if (!global._lsys_light_deleted[i])
        draw_circle(global._lsys_light_xpos[i]/global._lsys_quality, global._lsys_light_ypos[i]/global._lsys_quality, 8, true);
}
*/
/*
draw_set_color(c_white);
draw_set_font(fntDetails);
draw_text(view_wview[0] - 22, 130, "FPS: " + string(fps) + "#VRAM: " + string(vram_usage()/1024/1024));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
