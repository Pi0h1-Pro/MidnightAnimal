<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//repeat (5) instance_create(random(room_width),0,objSceneFence)
title = global.title
i = 0
repeat(string_length(global.title)) {
    rise[i] = -10 - i
    i += 1
}
dir = 0
blend = 0
prefixblend = 0
prefix = global.pretitle
reload = 0

dir = 0
i = 0
alarm[0] = 600
alarm[1] = 1 + random(100)
//alarm[2] = 600

//Draw stars.
repeat(72) {
    starx[i] = random(room_width)
    stary[i] = random(room_height / 2)
    starsize[i] = random(2) * random(1)
    starintensity[i] = random(1)
    i += 1
}

sunalpha = 0
sunshine = 0
float = 0
horizon = 0

fuchsia = make_color_rgb(255, 0, 128)
aqua = make_color_rgb(0, 255, 210)
addx1 = 0
addx2 = 0
myx = 0
drawpart = 1

sunalpha = 0
sunshine = 0
housex = 0
dir = 180
dir2 = 0
cdir = 0

scrClearBlood()
if global.resetstory = 1 {
    scrResetStory()
} else {
    set_automatic_draw(true)
}
global.levels[scrGetCurrentLevel() - 1] = 1
scrSaveUnlocked()
pointx = -192
i = 0

repeat(string_length(global.title)) {
    amount[i] = 1
    on[i] = 0
    i += 1
}

dir = 90

fade = 0
c_amount = 0


hint[0] = "TIP: Cognitive dissonance is an uncomfortable feeling#caused by holding two conflicting ideas simultaneously."
hint[1] = "TIP: Follow the red arrows."
hint[2] = "TIP: We cannot escape anguish.#It is what we are."
hint[3] = "TIP: Don't be afraid of dying."
hint[4] = "TIP: Recklessness is rewarded."
hint[5] = "TIP: You cannot understand,#nor do you want to."
hint[6] = "TIP: Freedom is what you do#with what's been done to you."
hint[7] = "TIP: All actions are equivalent,#and are on principle doomed to failure."
hint[8] = "TIP: Animals do not #understand their own actions."
hint[9] = "TIP: Kill a man, and you are a murderer. #Kill everyone, and you are a god."
hint[10] = "TIP: Pay attention to details.#Is this really happening?"
hint[11] = "TIP: Murder is nothing more#than a matter of quick reflexes and a steady hand."
hint[12] = "TIP: There is no difference between#what is right and what is necessary."
hint[13] = "TIP: Be sure to finish off downed enemies."

myhint = floor(random(14))

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    shinex = random(room_width)
    shiney = random(room_height / 2)
    star = instance_create(shinex, shiney, objStar)
    star.image_alpha = choose(0.3, 0.5, 0.7, 0.9)
    star.image_xscale = 0.5 + random(2)
    star.image_yscale = image_xscale
    alarm[0]=1+random(100)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fade = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initiate surface.
if !surface_exists(global.surf1) {
    global.surf1 = surface_create(room_width, room_height)
    surface_set_target(global.surf1)
    draw_clear_alpha(c_black, 0)
    surface_reset_target()
}

surface_set_target(global.surf1)
draw_clear_alpha(c_black, 0)

//Draw chapter.
draw_set_font(fntChapterTitle)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_color(merge_color(c_yellow, c_orange, 0.5 + lengthdir_y(0.5, pointx * 2)))
draw_text(room_width / 2 + 1, y - 41, global.pretitle)

//Draw chapter name.
draw_set_color(merge_color(c_fuchsia, c_yellow, 0.5 + lengthdir_x(0.5, pointx * 2)))
draw_text(room_width / 2, y - 42, global.pretitle)
draw_set_font(fntChapter)

//Text.
i = string_length(global.title)
startx = string_width(global.title) * 0.5 + room_width * 0.5 - string_width(string_copy(global.title, 1, 1)) - 5
repeat(string_length(global.title)) {
    letter = string_copy(global.title, i, 1)
    if string_upper(letter) = 'I'
    addx = string_width(letter) * 0.4
    else addx = 0
    ii = 0
    if rise[i - 1] &gt; 0 {
        riseadd = rise[i - 1] + lengthdir_x(0.3 * rise[i - 1], -dir * 1.13 + i * 35)
    } else riseadd = 0 
    if rise[i - 1] &lt; 10 rise[i - 1] += 0.25
    repeat(riseadd) {
        amount = -0.5 + lengthdir_x(1.5, dir * 0.73)
        if amount &lt; 0 amount = 0
        draw_set_color(merge_color(c_white, merge_color(c_red, make_color_hsv(random(255), random(255), 255), amount), ii * (1 / 13)))
        draw_text_transformed(startx + addx + ii, room_height * 0.5 - ii, letter, 1, 1, 0)
        ii += 1
    }
    color2 = merge_color(c_white, draw_get_color(), abs(prefixblend))
    if riseadd &gt; 0 {
        draw_text_transformed(startx + addx + riseadd - 1, room_height * 0.5 - riseadd - 1, letter, 1, 1, 0)
        draw_text_transformed(startx + addx + riseadd + 1, room_height * 0.5 - riseadd - 1, letter, 1, 1, 0)
    }
    color1 = merge_color(c_black, c_white, abs(prefixblend))
    draw_text_transformed_color(startx + addx + riseadd, room_height * 0.5 - riseadd, letter, 1, 1, 0, color1, color1, color2, color2, 1)
    i -= 1
    startx -= string_width(letter)
}
surface_reset_target()
dir += 4
if prefixblend &lt; 1 {
    if prefixblend &lt; 0.03 prefixblend += 0.001
    else prefixblend += 0.01
} 

//Generate fences.
/*if reload &gt; 0 reload -= 1
else {
    if round(random(180)) = 2 {
        instance_create(room_width, 208, objSceneFence) reload = 300
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>exit
//fade=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir += 0.25

if sunalpha &gt;= 1 {
    if sunshine &lt; 1 sunshine += 0.05
}
if sunalpha &lt; 1 sunalpha += 0.01

if float &gt;= room_width {
    if horizon &lt; 1 horizon += 0.01
}
if float &lt; room_width float += 0.03

//Draws the background of the room, which is the black-reddish sky.
draw_rectangle_color(-20, -20, room_width + 20, room_height + 20, merge_color(c_black, c_navy, 0.15 + lengthdir_x(0.15, dir * 0.25)), merge_color(c_black, c_navy, 0.15 + lengthdir_x(0.15, dir * 0.25 + 45)), merge_color(c_purple, c_orange, 0.65 + lengthdir_x(0.24, dir * 0.6 + 30)), merge_color(c_purple, c_orange, 0.65 + lengthdir_x(0.24, dir * 0.6)), 0)

//Draw stars.

//i is just a temporary counter.
i = 0

//Draw 72 stars. This can be increased or decreased.
repeat(72) {

    //Draw a silver-white circle, for each iteration from 0 to 72. 
    //starx[i] and stary[y] are randomised variables determining the random position of the stars within the room, and are defined within the Create event.
    //starsize[i] randomises the size of the star and is defined within the Create event.
    //starintensity[i] determines the 'brightness' of the star by randomising the merging of silver with white. If you want all really bright stars, delete
    //random(starintensity[i]) and change it to 1. Conversely, for dull stars, delete it and replace it with 0. Otherwise, leave it.
    draw_circle_color(starx[i], stary[i], starsize[i], merge_color(merge_color(c_silver, c_white, random(1)), c_white, random(starintensity[i])), c_black, 0)
    i += 1
}

//Draw flashing stars.
with objStar {
    draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, merge_color(c_white, merge_color(c_ltgray, c_silver, random(1)), random(1)), 1)
}

//Begin drawing the sun.
draw_set_blend_mode(bm_add)

//Draws the largest outer ring of the sun, which is a reddish tinge.
draw_circle_color(room_width / 2, room_height / 3 + 90, 180 + lengthdir_x(40, dir * 0.25), c_orange, c_black, 0)

//Draws the innermost smaller ring of the sun, which just barely forms a halo around the sun, and is a pinkish tinge.
draw_circle_color(room_width / 2, room_height / 3 + 90, 80 + lengthdir_x(40, dir * 0.25), c_yellow, c_black, 0)

//Draws a faded version of the sun which is darker.
//draw_sprite_general(sprCitySun, 0, 0, 0, 200, 200, room_width / 2 - 100, room_height / 3, 1, 1, 0, c_red, c_red, merge_color(c_yellow, c_white, objMain.sunalpha + lengthdir_x(0.5, dir)), merge_color(c_yellow, c_white, objMain.sunalpha + lengthdir_x(0.5, dir)), objMain.sunalpha)

//Draw horizon strip.
color = merge_color(merge_color(c_orange, c_red, 0.5 + lengthdir_x(0.5, dir)), merge_color(c_fuchsia, c_yellow, 0.5 + lengthdir_x(0.5, dir)), i * (1 / 138))
draw_rectangle_color(0, room_height / 2 + 4, room_width, room_height / 2 + 33, c_black, c_black, color, color, 0)

draw_set_blend_mode(bm_normal)
    //End drawing the sun.

//Draws the actual sun itself, which is maroon-red at the top, and slowly fades down to reddish-white.
draw_sprite_general(sprCitySun, 0, 0, 0, 200, 200, room_width / 2 - 100, room_height / 3 - sunalpha * 10, 1, 1, 0, merge_color(c_orange, c_yellow, 0.2), merge_color(c_orange, c_yellow, 0.2), merge_color(c_yellow, c_white, 0.5 + lengthdir_x(0.5, dir)), merge_color(c_yellow, c_white, 0.5 + lengthdir_x(0.5, dir)), sunalpha)

//This optionally adds a mountain into the scene in the background. Remove the comment to add it. The positioning of it is a bit off at the moment, but can be messed around with until satisfactory.
draw_sprite_general(sprMountain, 0, 0, 0, 480, 96, -86, 108, 1.3, 1.3, 0, c_black, c_black, merge_color(c_black, c_aqua, 0.2 + lengthdir_x(0.1, dir * 0.1)), merge_color(c_black, c_aqua, 0.2 + lengthdir_x(0.1, dir * 0.1 + 110)), image_alpha)

draw_sprite_general(sprCellTower, 0, 0, 0, 80, 160, 288, 0, 1.1, 1.1, 0, c_black, c_black, merge_color(c_black, c_dkgray, 0.2 + lengthdir_x(0.1, dir * 0.1)), merge_color(c_black, c_dkgray, 0.2 + lengthdir_x(0.1, dir * 0.1 + 110)), image_alpha)

draw_sprite_general(sprTreeLine3, 0, 0, 0, 1494, 302, -100 - float / 2, 60, 0.5, 0.5, 0, c_black, c_black, merge_color(c_black, c_aqua, 0.1), merge_color(c_black, c_aqua, 0.1), image_alpha)
draw_sprite_general(sprTreeLine1, 0, 0, 0, 900, 382, -50 + float / 5, 80, 0.55, 0.55, 0, c_black, c_black, merge_color(c_black, c_aqua, 0.075), merge_color(c_black, c_aqua, 0.075), image_alpha)
draw_sprite_general(sprTreeLine2, 0, 0, 0, 987, 246, -10 - float / 6, 120, 0.5, 0.5, 0, c_dkgray, c_dkgray, c_aqua, c_aqua, image_alpha)
    //Draws the front mountainy area. 
color = merge_color(c_black, c_aqua, 0.135)
draw_sprite_general(sprGround, 0, 0, 0, 482, 100, 0, 160, 1, 1, 0, c_black, c_black, color, color, image_alpha)


//Draw dark lines for hint box.
/*draw_set_blend_mode(bm_subtract)
i = 0
repeat(6) {
    draw_line_width_color(0, 10 + i * 4, room_width, 8 + i * 4, 2, c_black, merge_color(c_dkgray, c_black, 0.5 + lengthdir_x(0.5, amount)))
    i += 1
}
i = 0
repeat(10) {
    draw_line_width_color(0, room_height * 0.7 - 1 + i * 4, room_width, room_height * 0.7 - 1 + i * 4, 2, c_black, merge_color(c_dkgray, c_black, 0.5 + lengthdir_x(0.5, amount)))
    i += 1
}
if fade = 0 {
    if amount &lt; 180 amount += 10
}
if fade = 1 {
    if amount &gt; 0 amount -= 10
}
draw_set_blend_mode(bm_normal)
*/
d3d_set_projection_ortho(0, 0, view_wview[0], view_hview[0], view_angle[0])
if surface_exists(global.surf1) {
    draw_surface_ext(global.surf1, 0, -1, 1, 1, 0, c_black, 1)
    draw_surface_ext(global.surf1, -1, 0, 1, 1, 0, c_black, 1)
    draw_surface_ext(global.surf1, 0, 1, 1, 1, 0, c_black, 1)
    draw_surface_ext(global.surf1, 1, 0, 1, 1, 0, c_black, 1)
    draw_surface_ext(global.surf1, 0, 0, 1, 1, 0, c_white, 1)
}

//The entire scene shifts back and forth.
view_angle[0] = lengthdir_y(0.4, dir * 0.33)
d3d_set_projection_ortho(0, 0, view_wview[0], view_hview[0], 0)

//Draw text.
draw_set_font(fntDate)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_color(c_black)
draw_text(room_width / 2, room_height - 58 - 1, hint[myhint])
draw_text(room_width / 2, room_height - 58 + 1, hint[myhint])
draw_text(room_width / 2 - 1, room_height - 58, hint[myhint])
draw_text(room_width / 2 + 1, room_height - 58, hint[myhint])
draw_set_color(c_white)
draw_text(room_width / 2, room_height - 58, hint[myhint])


if fade = 0 {
    if c_amount &lt; 180 {
        c_amount += 10
        color1 = merge_color(c_black, merge_color(c_aqua, c_white, 0.5 + lengthdir_x(0.5, c_amount)), 0.5 + lengthdir_x(0.5, c_amount))
        if c_amount &gt; 90 color2 = merge_color(c_black, merge_color(c_fuchsia, c_white, abs(lengthdir_y(1, c_amount))), abs(lengthdir_y(1, c_amount)))
        else color2 = c_white
        draw_set_blend_mode(bm_subtract)
        draw_rectangle_color(view_xview[0] - 10, view_yview[0] - 10, view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, color1, color2, color2, color1, 0)
        draw_set_blend_mode(bm_normal)
    }
}

if fade = 1 {
    if c_amount &gt; 0 {
        c_amount -= 5
        color1 = merge_color(c_black, merge_color(c_aqua, c_white, 0.5 + lengthdir_x(0.5, c_amount)), 0.5 + lengthdir_x(0.5, c_amount))
        if c_amount &gt; 90 color2 = merge_color(c_black, merge_color(c_fuchsia, c_white, abs(lengthdir_y(1, c_amount))), abs(lengthdir_y(1, c_amount)))
        else color2 = c_white
        draw_set_blend_mode(bm_subtract)
        draw_rectangle_color(view_xview[0] - 10, view_yview[0] - 10, view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, color2, color1, color1, color2, 0)
        draw_set_blend_mode(bm_normal)
    } else {
        room_goto(global.level)
    }
}


draw_set_blend_mode(bm_subtract)
my_y = random(32)
draw_sprite_tiled(sprScanlines, 0, 0, my_y)
draw_set_blend_mode(bm_subtract)
draw_set_blend_mode(bm_normal)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
